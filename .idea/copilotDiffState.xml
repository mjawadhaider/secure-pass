<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/add/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/add/page.js" />
              <option name="originalContent" value="import NavBar from &quot;../../components/NavBar&quot;;&#10;&#10;export default function AddPasswordPage() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;p-4&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold mb-4&quot;&gt;Add New Password&lt;/h2&gt;&#10;                &lt;form className=&quot;space-y-3 max-w-md&quot;&gt;&#10;                    &lt;input type=&quot;text&quot; placeholder=&quot;Title&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;button className=&quot;bg-blue-600 px-4 py-2 text-white rounded&quot;&gt;Save&lt;/button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import NavBar from &quot;../../components/NavBar&quot;;&#10;import { FaSave } from &quot;react-icons/fa&quot;;&#10;&#10;export default function AddPasswordPage() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;flex justify-center&quot;&gt;&#10;                &lt;div className=&quot;bg-white/90 rounded-2xl shadow-xl p-8 w-full max-w-md mt-6&quot;&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold mb-6 text-blue-700&quot;&gt;Add New Password&lt;/h2&gt;&#10;                    &lt;form className=&quot;space-y-5&quot;&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Title&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Username&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;password&quot;&#10;                            placeholder=&quot;Password&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 px-6 py-3 text-white rounded-lg flex items-center gap-2 font-semibold shadow transition&quot;&#10;                        &gt;&#10;                            &lt;FaSave /&gt; Save&#10;                        &lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/layout.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/layout.js" />
              <option name="originalContent" value="import { Geist, Geist_Mono } from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;import NavBar from &quot;../components/NavBar&quot;;&#10;&#10;const geistSans = Geist({&#10;  variable: &quot;--font-geist-sans&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;  variable: &quot;--font-geist-mono&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata = {&#10;    title: &quot;SecurePass&quot;,&#10;    description: &quot;Secure offline password manager&quot;,&#10;};&#10;&#10;export default function RootLayout({ children }) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot;&gt;&#10;      &lt;body&#10;        className={`${geistSans.variable} ${geistMono.variable} antialiased`}&#10;      &gt;&#10;        &lt;NavBar /&gt;&#10;        &lt;main className=&quot;flex-grow p-4&quot;&gt;{children}&lt;/main&gt;&#10;        &lt;footer className=&quot;bg-gray-200 p-3 text-center text-sm text-gray-600&quot;&gt;&#10;            SecurePass Â© {new Date().getFullYear()}&#10;        &lt;/footer&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { Geist, Geist_Mono } from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;import NavBar from &quot;../components/NavBar&quot;;&#10;&#10;const geistSans = Geist({&#10;  variable: &quot;--font-geist-sans&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;  variable: &quot;--font-geist-mono&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata = {&#10;    title: &quot;SecurePass&quot;,&#10;    description: &quot;Secure offline password manager&quot;,&#10;};&#10;&#10;export default function RootLayout({ children }) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot;&gt;&#10;      &lt;body&#10;        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gradient-to-br from-blue-50 via-white to-blue-100 min-h-screen`}&#10;      &gt;&#10;        &lt;NavBar /&gt;&#10;        &lt;main className=&quot;flex-grow p-4 pt-20 max-w-2xl mx-auto w-full&quot;&gt;{children}&lt;/main&gt;&#10;        &lt;footer className=&quot;bg-white/70 border-t border-gray-200 p-4 text-center text-xs text-gray-500 rounded-t-xl shadow-inner mt-8&quot;&gt;&#10;            &lt;span className=&quot;font-semibold text-blue-600&quot;&gt;SecurePass&lt;/span&gt; &amp;copy; {new Date().getFullYear()} &amp;mdash; Your offline vault&#10;        &lt;/footer&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import {FaEye, FaPlus, FaSearch, FaUserCircle, FaClipboard, FaTimes} from &quot;react-icons/fa&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import AddNewPasswordModal from &quot;../components/CreateUpdatePasswordModal&quot;;&#10;import ShowPasswordModal from &quot;@/components/ShowPasswordModal&quot;;&#10;&#10;export default function HomePage() {&#10;    const [passwords, setPasswords] = useState([]);&#10;    const [filteredPasswords, setFilteredPasswords] = useState([]);&#10;    const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;    const [showModal, setShowModal] = useState(false);&#10;    const [editPassword, setEditPassword] = useState(null);&#10;    const [viewPassword, setViewPassword] = useState(null);&#10;&#10;    // Load passwords from localStorage on mount&#10;    useEffect(() =&gt; {&#10;        loadPasswords();&#10;    }, []);&#10;&#10;    // Update filteredPasswords when passwords change&#10;    useEffect(() =&gt; {&#10;        setFilteredPasswords(passwords);&#10;    }, [passwords]);&#10;&#10;    // Save passwords to localStorage whenever passwords change&#10;    useEffect(() =&gt; {&#10;        if (typeof window !== &quot;undefined&quot;) {&#10;            localStorage.setItem(&quot;passwords&quot;, JSON.stringify(passwords));&#10;            // Optional: console.log for debugging&#10;            // console.log('Passwords saved to localStorage', passwords);&#10;        }&#10;    }, [passwords]);&#10;&#10;    function loadPasswords() {&#10;        const stored = typeof window !== &quot;undefined&quot; ? localStorage.getItem(&quot;passwords&quot;) : null;&#10;        if (stored) {&#10;            try {&#10;                setPasswords(JSON.parse(stored));&#10;            } catch {&#10;                setPasswords([]);&#10;            }&#10;        }&#10;    }&#10;&#10;    function handleSearch(value) {&#10;        setSearchTerm(value);&#10;        if (!value.trim()) {&#10;            setFilteredPasswords(passwords);&#10;            return;&#10;        }&#10;        const filtered = passwords.filter(password =&gt;&#10;            password.title?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.username?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.url?.toLowerCase().includes(value.toLowerCase())&#10;        );&#10;        setFilteredPasswords(filtered);&#10;    }&#10;&#10;    function handleKeyDown(e) {&#10;        const value = e.target.value;&#10;        handleSearch(value);&#10;    }&#10;&#10;    function addNewPassword(newPassword, isEdit = false) {&#10;        if (isEdit &amp;&amp; newPassword.id) {&#10;            setPasswords(prev =&gt;&#10;                prev.map(p =&gt; (p.id === newPassword.id ? newPassword : p))&#10;            );&#10;        } else {&#10;            setPasswords(prev =&gt; [...prev, newPassword]);&#10;        }&#10;        setSearchTerm(&quot;&quot;);&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    function onCloseNewPasswordModal() {&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    function handleEditPassword(password) {&#10;        setEditPassword(password);&#10;        setShowModal(true);&#10;    }&#10;&#10;    function handleViewPassword(password) {&#10;        setViewPassword(password);&#10;    }&#10;&#10;    function closeViewModal() {&#10;        setViewPassword(null);&#10;    }&#10;&#10;    return (&#10;        &lt;div&gt;&#10;            &lt;div className=&quot;relative w-full max-w-md mx-auto mt-2 mb-5&quot;&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search passwords...&quot;&#10;                    defaultValue={searchTerm}&#10;                    onKeyUp={handleKeyDown}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 rounded-lg text-black bg-white/70 focus:bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all&quot;&#10;                /&gt;&#10;                &lt;FaSearch className=&quot;absolute left-3 top-1/2 -translate-y-1/2 text-gray-500&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Add Button */}&#10;            &lt;button&#10;                onClick={() =&gt; setShowModal(true)}&#10;                className=&quot;fixed bottom-8 right-8 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg flex items-center justify-center z-30 transition&quot;&#10;                aria-label=&quot;Add new password&quot;&#10;            &gt;&#10;                &lt;FaPlus className=&quot;text-2xl&quot;/&gt;&#10;            &lt;/button&gt;&#10;&#10;            {/* Add/Edit Modal */}&#10;            {showModal &amp;&amp; (&#10;                &lt;AddNewPasswordModal&#10;                    addNewPassword={addNewPassword}&#10;                    onCloseModal={onCloseNewPasswordModal}&#10;                    editPassword={editPassword}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* View Password Modal */}&#10;            {viewPassword &amp;&amp; (&#10;                &lt;ShowPasswordModal closeViewModal={closeViewModal} viewPassword={viewPassword} /&gt;&#10;            )}&#10;&#10;            &lt;h2 className=&quot;text-2xl font-bold mb-6 text-white tracking-tight&quot;&gt;Saved Passwords&lt;/h2&gt;&#10;            &lt;ul className=&quot;space-y-4&quot;&gt;&#10;                {filteredPasswords.map((item) =&gt; (&#10;                    &lt;li&#10;                        key={item.id}&#10;                        className=&quot;bg-white/80 p-4 rounded-xl shadow-md flex items-center justify-between hover:shadow-lg transition-shadow&quot;&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                            &lt;FaUserCircle className=&quot;text-gray-800 text-3xl&quot;/&gt;&#10;                            &lt;div&gt;&#10;                                &lt;p className=&quot;font-semibold text-lg text-gray-800&quot;&gt;{item.title}&lt;/p&gt;&#10;                                &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;{item.username}&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-gray-800 hover:bg-gray-900 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleViewPassword(item)}&#10;                            &gt;&#10;                                &lt;FaEye/&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;View&lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-blue-500 hover:bg-blue-600 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleEditPassword(item)}&#10;                                aria-label=&quot;Edit&quot;&#10;                            &gt;&#10;                                Edit&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/li&gt;&#10;                ))}&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import {FaEye, FaPlus, FaSearch, FaUserCircle, FaFingerprint} from &quot;react-icons/fa&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import AddNewPasswordModal from &quot;../components/CreateUpdatePasswordModal&quot;;&#10;import ShowPasswordModal from &quot;@/components/ShowPasswordModal&quot;;&#10;import PinModal from &quot;@/components/PinModal&quot;;&#10;import AuthService from &quot;@/services/AuthService&quot;;&#10;&#10;export default function HomePage() {&#10;    const [passwords, setPasswords] = useState([]);&#10;    const [filteredPasswords, setFilteredPasswords] = useState([]);&#10;    const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;    const [showModal, setShowModal] = useState(false);&#10;    const [editPassword, setEditPassword] = useState(null);&#10;    const [viewPassword, setViewPassword] = useState(null);&#10;    const [isAuthenticating, setIsAuthenticating] = useState(false);&#10;    const [selectedPasswordForAuth, setSelectedPasswordForAuth] = useState(null);&#10;    const [biometricAvailable, setBiometricAvailable] = useState(false);&#10;    const [showPinSetup, setShowPinSetup] = useState(false);&#10;&#10;    // Load passwords from localStorage on mount&#10;    useEffect(() =&gt; {&#10;        loadPasswords();&#10;    }, []);&#10;&#10;    // Update filteredPasswords when passwords change&#10;    useEffect(() =&gt; {&#10;        setFilteredPasswords(passwords);&#10;    }, [passwords]);&#10;&#10;    // Save passwords to localStorage whenever passwords change&#10;    useEffect(() =&gt; {&#10;        if (typeof window !== &quot;undefined&quot;) {&#10;            localStorage.setItem(&quot;passwords&quot;, JSON.stringify(passwords));&#10;            // Optional: console.log for debugging&#10;            // console.log('Passwords saved to localStorage', passwords);&#10;        }&#10;    }, [passwords]);&#10;&#10;    // Check for biometric availability on mount&#10;    useEffect(() =&gt; {&#10;        const checkBiometricAvailability = async () =&gt; {&#10;            const available = await AuthService.isBiometricAvailable();&#10;            setBiometricAvailable(available);&#10;            &#10;            // If no PIN is set, show PIN setup on first load&#10;            if (!AuthService.hasPin()) {&#10;                setShowPinSetup(true);&#10;            }&#10;        };&#10;        &#10;        checkBiometricAvailability();&#10;    }, []);&#10;&#10;    function loadPasswords() {&#10;        const stored = typeof window !== &quot;undefined&quot; ? localStorage.getItem(&quot;passwords&quot;) : null;&#10;        if (stored) {&#10;            try {&#10;                setPasswords(JSON.parse(stored));&#10;            } catch {&#10;                setPasswords([]);&#10;            }&#10;        }&#10;    }&#10;&#10;    function handleSearch(value) {&#10;        setSearchTerm(value);&#10;        if (!value.trim()) {&#10;            setFilteredPasswords(passwords);&#10;            return;&#10;        }&#10;        const filtered = passwords.filter(password =&gt;&#10;            password.title?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.username?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.url?.toLowerCase().includes(value.toLowerCase())&#10;        );&#10;        setFilteredPasswords(filtered);&#10;    }&#10;&#10;    function handleKeyDown(e) {&#10;        const value = e.target.value;&#10;        handleSearch(value);&#10;    }&#10;&#10;    function addNewPassword(newPassword, isEdit = false) {&#10;        if (isEdit &amp;&amp; newPassword.id) {&#10;            setPasswords(prev =&gt;&#10;                prev.map(p =&gt; (p.id === newPassword.id ? newPassword : p))&#10;            );&#10;        } else {&#10;            setPasswords(prev =&gt; [...prev, newPassword]);&#10;        }&#10;        setSearchTerm(&quot;&quot;);&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    function onCloseNewPasswordModal() {&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    async function handleViewPassword(password) {&#10;        setSelectedPasswordForAuth(password);&#10;        &#10;        if (biometricAvailable) {&#10;            setIsAuthenticating(true);&#10;            const authenticated = await AuthService.authenticateWithBiometric();&#10;            if (authenticated) {&#10;                setViewPassword(password);&#10;            }&#10;            setIsAuthenticating(false);&#10;        } else if (AuthService.hasPin()) {&#10;            // Show PIN verification&#10;            setIsAuthenticating(true);&#10;        } else {&#10;            // No security set up, show PIN setup first&#10;            setShowPinSetup(true);&#10;        }&#10;    }&#10;&#10;    function handlePinSuccess() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;        if (selectedPasswordForAuth) {&#10;            setViewPassword(selectedPasswordForAuth);&#10;            setSelectedPasswordForAuth(null);&#10;        }&#10;    }&#10;&#10;    function handlePinCancel() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;        setSelectedPasswordForAuth(null);&#10;    }&#10;&#10;    function closeViewModal() {&#10;        setViewPassword(null);&#10;    }&#10;&#10;    return (&#10;        &lt;div&gt;&#10;            &lt;div className=&quot;relative w-full max-w-md mx-auto mt-2 mb-5&quot;&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search passwords...&quot;&#10;                    defaultValue={searchTerm}&#10;                    onKeyUp={handleKeyDown}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 rounded-lg text-black bg-white/70 focus:bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all&quot;&#10;                /&gt;&#10;                &lt;FaSearch className=&quot;absolute left-3 top-1/2 -translate-y-1/2 text-gray-500&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Add Button */}&#10;            &lt;button&#10;                onClick={() =&gt; setShowModal(true)}&#10;                className=&quot;fixed bottom-8 right-8 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg flex items-center justify-center z-30 transition&quot;&#10;                aria-label=&quot;Add new password&quot;&#10;            &gt;&#10;                &lt;FaPlus className=&quot;text-2xl&quot;/&gt;&#10;            &lt;/button&gt;&#10;&#10;            {/* Add/Edit Modal */}&#10;            {showModal &amp;&amp; (&#10;                &lt;AddNewPasswordModal&#10;                    addNewPassword={addNewPassword}&#10;                    onCloseModal={onCloseNewPasswordModal}&#10;                    editPassword={editPassword}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Setup Modal */}&#10;            {showPinSetup &amp;&amp; (&#10;                &lt;PinModal &#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                    isSetup={true}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Verification Modal */}&#10;            {isAuthenticating &amp;&amp; !biometricAvailable &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* Biometric Authentication Indicator */}&#10;            {isAuthenticating &amp;&amp; biometricAvailable &amp;&amp; (&#10;                &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/40&quot;&gt;&#10;                    &lt;div className=&quot;bg-white rounded-2xl shadow-2xl p-8 text-center&quot;&gt;&#10;                        &lt;FaFingerprint className=&quot;text-5xl text-blue-600 mx-auto mb-4 animate-pulse&quot; /&gt;&#10;                        &lt;h2 className=&quot;text-xl font-bold text-blue-700&quot;&gt;&#10;                            Authenticating...&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-500 mt-2&quot;&gt;&#10;                            Use your fingerprint or face to continue&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* View Password Modal */}&#10;            {viewPassword &amp;&amp; (&#10;                &lt;ShowPasswordModal closeViewModal={closeViewModal} viewPassword={viewPassword} /&gt;&#10;            )}&#10;&#10;            &lt;h2 className=&quot;text-2xl font-bold mb-6 text-white tracking-tight&quot;&gt;Saved Passwords&lt;/h2&gt;&#10;            &lt;ul className=&quot;space-y-4&quot;&gt;&#10;                {filteredPasswords.map((item) =&gt; (&#10;                    &lt;li&#10;                        key={item.id}&#10;                        className=&quot;bg-white/80 p-4 rounded-xl shadow-md flex items-center justify-between hover:shadow-lg transition-shadow&quot;&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                            &lt;FaUserCircle className=&quot;text-gray-800 text-3xl&quot;/&gt;&#10;                            &lt;div&gt;&#10;                                &lt;p className=&quot;font-semibold text-lg text-gray-800&quot;&gt;{item.title}&lt;/p&gt;&#10;                                &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;{item.username}&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-gray-800 hover:bg-gray-900 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleViewPassword(item)}&#10;                            &gt;&#10;                                &lt;FaEye/&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;View&lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-blue-500 hover:bg-blue-600 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleEditPassword(item)}&#10;                                aria-label=&quot;Edit&quot;&#10;                            &gt;&#10;                                Edit&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/li&gt;&#10;                ))}&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/unlock/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/unlock/page.js" />
              <option name="originalContent" value="import NavBar from &quot;../../components/NavBar&quot;;&#10;&#10;export default function UnlockPage() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;NavBar /&gt;&#10;            &lt;div className=&quot;p-4 flex flex-col items-center&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold mb-4&quot;&gt;Unlock Your Vault&lt;/h2&gt;&#10;                &lt;button className=&quot;bg-green-600 px-6 py-3 text-white rounded shadow-lg&quot;&gt;&#10;                    Unlock with Fingerprint&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import NavBar from &quot;../../components/NavBar&quot;;&#10;import { FaFingerprint } from &quot;react-icons/fa&quot;;&#10;&#10;export default function UnlockPage() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;NavBar /&gt;&#10;            &lt;div className=&quot;flex justify-center&quot;&gt;&#10;                &lt;div className=&quot;bg-white/90 rounded-2xl shadow-xl p-8 w-full max-w-md mt-10 flex flex-col items-center&quot;&gt;&#10;                    &lt;FaFingerprint className=&quot;text-5xl text-blue-500 mb-4&quot; /&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold mb-6 text-blue-700&quot;&gt;Unlock Your Vault&lt;/h2&gt;&#10;                    &lt;button className=&quot;bg-green-600 hover:bg-green-700 px-8 py-3 text-white rounded-lg shadow-lg font-semibold text-lg flex items-center gap-2 transition&quot;&gt;&#10;                        &lt;FaFingerprint className=&quot;text-xl&quot; /&gt; Unlock with Fingerprint&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/CreateUpdatePasswordModal.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/CreateUpdatePasswordModal.js" />
              <option name="originalContent" value="import {FaPlus, FaTimes} from &quot;react-icons/fa&quot;;&#10;import {useState} from &quot;react&quot;;&#10;&#10;export default function AddPasswordPage({addNewPassword, onCloseModal}) {&#10;&#10;    const [payload, setPayload] = useState({&#10;        title: &quot;&quot;,&#10;        username: &quot;&quot;,&#10;        password: &quot;&quot;,&#10;        url: &quot;&quot;,&#10;    });&#10;    const [msgConfig, setMsgConfig] = useState({&#10;        msg: '',&#10;        show: false,&#10;        type: 'error',&#10;    });&#10;&#10;    const closeModal = () =&gt; onCloseModal();&#10;&#10;    const showError = (message) =&gt; {&#10;        setMsgConfig({&#10;            msg: message,&#10;            show: true,&#10;            type: 'error',&#10;        })&#10;    }&#10;&#10;    const handleAddPassword = (e) =&gt; {&#10;        e.preventDefault();&#10;        if (!payload || !payload.title.trim() || !payload.username.trim() || !payload.password.trim()) {&#10;            return showError('Please fill in all fields');&#10;        }&#10;        addNewPassword({&#10;            id: Date.now(),&#10;            url: &quot;&quot;,&#10;            ...payload,&#10;        });&#10;        closeModal();&#10;    };&#10;&#10;    const updatePayload = (e) =&gt; {&#10;        setPayload((prev) =&gt; ({&#10;            ...prev,&#10;            [e.target.name]: e.target.value.trim(),&#10;        }));&#10;    }&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;fixed inset-0 z-40 flex items-center justify-center bg-black/40&quot;&gt;&#10;                &lt;div className=&quot;bg-white rounded-2xl shadow-2xl p-8 w-full max-w-sm relative&quot;&gt;&#10;                    &lt;button&#10;                        onClick={closeModal}&#10;                        className=&quot;absolute top-3 right-3 text-gray-400 hover:text-gray-700&quot;&#10;                        aria-label=&quot;Close&quot;&#10;                    &gt;&#10;                        &lt;FaTimes className=&quot;text-xl&quot;/&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-bold mb-6 text-blue-700&quot;&gt;Add New Password&lt;/h2&gt;&#10;                    &lt;form className=&quot;space-y-4&quot; onSubmit={handleAddPassword}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Title&quot;&#10;                            name=&quot;title&quot;&#10;                            value={payload.title}&#10;                            onChange={updatePayload}&#10;                            className=&quot;text-input&quot;&#10;                            required&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Username&quot;&#10;                            name=&quot;username&quot;&#10;                            value={payload.username}&#10;                            onChange={updatePayload}&#10;                            className=&quot;text-input&quot;&#10;                            required&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;password&quot;&#10;                            placeholder=&quot;Password&quot;&#10;                            name=&quot;password&quot;&#10;                            value={payload.password}&#10;                            onChange={updatePayload}&#10;                            className=&quot;text-input&quot;&#10;                            required&#10;                        /&gt;&#10;                        &lt;button&#10;                            type=&quot;submit&quot;&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 px-6 py-3 text-white rounded-lg flex items-center gap-2 font-semibold shadow transition w-full justify-center&quot;&#10;                        &gt;&#10;                            &lt;FaPlus/&gt; Add Password&#10;                        &lt;/button&gt;&#10;                        {msgConfig.show &amp;&amp; (&#10;                            &lt;div&#10;                                className={`mt-4 p-3 rounded-lg text-white ${msgConfig.type === 'error' ? 'bg-red-500' : 'bg-green-500'}`}&gt;&#10;                                {msgConfig.msg}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import {FaPlus, FaTimes} from &quot;react-icons/fa&quot;;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;&#10;export default function AddPasswordPage({addNewPassword, onCloseModal, editPassword}) {&#10;    const [payload, setPayload] = useState({&#10;        title: &quot;&quot;,&#10;        username: &quot;&quot;,&#10;        password: &quot;&quot;,&#10;        url: &quot;&quot;,&#10;    });&#10;    const [msgConfig, setMsgConfig] = useState({&#10;        msg: '',&#10;        show: false,&#10;        type: 'error',&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        if (editPassword) {&#10;            setPayload({&#10;                title: editPassword.title || &quot;&quot;,&#10;                username: editPassword.username || &quot;&quot;,&#10;                password: editPassword.password || &quot;&quot;,&#10;                url: editPassword.url || &quot;&quot;,&#10;                id: editPassword.id,&#10;            });&#10;        } else {&#10;            setPayload({&#10;                title: &quot;&quot;,&#10;                username: &quot;&quot;,&#10;                password: &quot;&quot;,&#10;                url: &quot;&quot;,&#10;            });&#10;        }&#10;    }, [editPassword]);&#10;&#10;    const closeModal = () =&gt; onCloseModal();&#10;&#10;    const showError = (message) =&gt; {&#10;        setMsgConfig({&#10;            msg: message,&#10;            show: true,&#10;            type: 'error',&#10;        })&#10;    }&#10;&#10;    const handleAddPassword = (e) =&gt; {&#10;        e.preventDefault();&#10;        if (!payload || !payload.title.trim() || !payload.username.trim() || !payload.password.trim()) {&#10;            return showError('Please fill in all fields');&#10;        }&#10;        addNewPassword(&#10;            {&#10;                id: payload.id || Date.now(),&#10;                url: payload.url || &quot;&quot;,&#10;                title: payload.title,&#10;                username: payload.username,&#10;                password: payload.password,&#10;            },&#10;            !!editPassword&#10;        );&#10;        closeModal();&#10;    };&#10;&#10;    const updatePayload = (e) =&gt; {&#10;        setPayload((prev) =&gt; ({&#10;            ...prev,&#10;            [e.target.name]: e.target.value,&#10;        }));&#10;    }&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;fixed inset-0 z-40 flex items-center justify-center bg-black/40&quot;&gt;&#10;                &lt;div className=&quot;bg-white rounded-2xl shadow-2xl p-8 w-full max-w-sm relative&quot;&gt;&#10;                    &lt;button&#10;                        onClick={closeModal}&#10;                        className=&quot;absolute top-3 right-3 text-gray-400 hover:text-gray-700&quot;&#10;                        aria-label=&quot;Close&quot;&#10;                    &gt;&#10;                        &lt;FaTimes className=&quot;text-xl&quot;/&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-bold mb-6 text-blue-700&quot;&gt;&#10;                        {editPassword ? &quot;Edit Password&quot; : &quot;Add New Password&quot;}&#10;                    &lt;/h2&gt;&#10;                    &lt;form className=&quot;space-y-4&quot; onSubmit={handleAddPassword}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Title&quot;&#10;                            name=&quot;title&quot;&#10;                            value={payload.title}&#10;                            onChange={updatePayload}&#10;                            className=&quot;text-input&quot;&#10;                            required&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Username&quot;&#10;                            name=&quot;username&quot;&#10;                            value={payload.username}&#10;                            onChange={updatePayload}&#10;                            className=&quot;text-input&quot;&#10;                            required&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;password&quot;&#10;                            placeholder=&quot;Password&quot;&#10;                            name=&quot;password&quot;&#10;                            value={payload.password}&#10;                            onChange={updatePayload}&#10;                            className=&quot;text-input&quot;&#10;                            required&#10;                        /&gt;&#10;                        &lt;button&#10;                            type=&quot;submit&quot;&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 px-6 py-3 text-white rounded-lg flex items-center gap-2 font-semibold shadow transition w-full justify-center&quot;&#10;                        &gt;&#10;                            &lt;FaPlus/&gt; {editPassword ? &quot;Update Password&quot; : &quot;Add Password&quot;}&#10;                        &lt;/button&gt;&#10;                        {msgConfig.show &amp;&amp; (&#10;                            &lt;div&#10;                                className={`mt-4 p-3 rounded-lg text-white ${msgConfig.type === 'error' ? 'bg-red-500' : 'bg-green-500'}`}&gt;&#10;                                {msgConfig.msg}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/NavBar.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/NavBar.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import {FaHome, FaPlus, FaLock, FaDownload} from &quot;react-icons/fa&quot;;&#10;&#10;export default function NavBar({ onSearch }) {&#10;    const pathname = usePathname();&#10;    const [deferredPrompt, setDeferredPrompt] = useState(null);&#10;    const [showInstall, setShowInstall] = useState(false);&#10;&#10;    useEffect(() =&gt; {&#10;        // Hide install button if already running as standalone&#10;        const isStandalone =&#10;            typeof window !== &quot;undefined&quot; &amp;&amp;&#10;            (window.matchMedia(&quot;(display-mode: standalone)&quot;).matches ||&#10;                window.navigator.standalone === true);&#10;&#10;        if (isStandalone) {&#10;            setShowInstall(false);&#10;            return;&#10;        }&#10;&#10;        const handler = (e) =&gt; {&#10;            e.preventDefault();&#10;            setDeferredPrompt(e);&#10;            setShowInstall(true);&#10;        };&#10;        window.addEventListener(&quot;beforeinstallprompt&quot;, handler);&#10;&#10;        // If the event never fires, hide the button&#10;        return () =&gt; window.removeEventListener(&quot;beforeinstallprompt&quot;, handler);&#10;    }, []);&#10;&#10;    const handleInstall = async () =&gt; {&#10;        if (deferredPrompt) {&#10;            deferredPrompt.prompt();&#10;            const { outcome } = await deferredPrompt.userChoice;&#10;            if (outcome === &quot;accepted&quot;) {&#10;                setShowInstall(false);&#10;            }&#10;            setDeferredPrompt(null);&#10;        }&#10;    };&#10;&#10;    const linkClass = (path) =&gt;&#10;        `flex items-center gap-2 px-4 py-2 rounded-lg transition-colors duration-200 font-medium&#10;        ${&#10;            pathname === path&#10;                ? &quot;bg-blue-400/50 text-white shadow-lg&quot;&#10;                : &quot;bg-white/40 text-gray-800 hover:bg-blue-100 hover:text-blue-700&quot;&#10;        }`;&#10;&#10;    return (&#10;        &lt;nav className=&quot;backdrop-blur bg-blend-darken border-b border-gray-200 p-2 flex gap-2 md:gap-4 fixed top-0 left-0 right-0 z-20 shadow-sm&quot;&gt;&#10;            &lt;div className=&quot;flex gap-2 md:gap-4 mx-auto&quot;&gt;&#10;                &lt;Link href=&quot;/&quot; className={linkClass(&quot;/&quot;)}&gt;&#10;                    &lt;FaHome /&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Home&lt;/span&gt;&#10;                &lt;/Link&gt;&#10;                &lt;Link href=&quot;/add&quot; className={linkClass(&quot;/add&quot;)}&gt;&#10;                    &lt;FaPlus /&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Add&lt;/span&gt;&#10;                &lt;/Link&gt;&#10;                &lt;Link href=&quot;/unlock&quot; className={linkClass(&quot;/unlock&quot;)}&gt;&#10;                    &lt;FaLock /&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Unlock&lt;/span&gt;&#10;                &lt;/Link&gt;&#10;                {showInstall &amp;&amp; (&#10;                    &lt;button&#10;                        onClick={handleInstall}&#10;                        className=&quot;flex items-center gap-2 px-4 py-2 rounded-lg bg-green-500 text-white font-medium shadow hover:bg-green-600 transition&quot;&#10;                    &gt;&#10;                        &lt;FaDownload /&gt;{&quot; &quot;}&#10;                        &lt;span className=&quot;hidden sm:inline&quot;&gt;Download App&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/nav&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import {FaHome, FaPlus, FaLock, FaDownload} from &quot;react-icons/fa&quot;;&#10;&#10;export default function NavBar({ onSearch }) {&#10;    const pathname = usePathname();&#10;    const [deferredPrompt, setDeferredPrompt] = useState(null);&#10;    const [showInstall, setShowInstall] = useState(false);&#10;&#10;    useEffect(() =&gt; {&#10;        // Hide install button if already running as standalone&#10;        const isStandalone =&#10;            typeof window !== &quot;undefined&quot; &amp;&amp;&#10;            (window.matchMedia(&quot;(display-mode: standalone)&quot;).matches ||&#10;                window.navigator.standalone === true);&#10;&#10;        if (isStandalone) {&#10;            setShowInstall(false);&#10;            return;&#10;        }&#10;&#10;        const handler = (e) =&gt; {&#10;            e.preventDefault();&#10;            setDeferredPrompt(e);&#10;            setShowInstall(true);&#10;        };&#10;        window.addEventListener(&quot;beforeinstallprompt&quot;, handler);&#10;&#10;        // If the event never fires, hide the button&#10;        return () =&gt; window.removeEventListener(&quot;beforeinstallprompt&quot;, handler);&#10;    }, []);&#10;&#10;    const handleInstall = async () =&gt; {&#10;        if (deferredPrompt) {&#10;            deferredPrompt.prompt();&#10;            const { outcome } = await deferredPrompt.userChoice;&#10;            if (outcome === &quot;accepted&quot;) {&#10;                setShowInstall(false);&#10;            }&#10;            setDeferredPrompt(null);&#10;        }&#10;    };&#10;&#10;    const linkClass = (path) =&gt;&#10;        `flex items-center gap-2 px-4 py-2 rounded-lg transition-colors duration-200 font-medium&#10;        ${&#10;            pathname === path&#10;                ? &quot;bg-blue-400/50 text-white shadow-lg&quot;&#10;                : &quot;bg-white/40 text-gray-800 hover:bg-blue-100 hover:text-blue-700&quot;&#10;        }`;&#10;&#10;    return (&#10;        &lt;nav className=&quot;backdrop-blur bg-blend-darken border-b border-gray-200 p-2 flex gap-2 md:gap-4 fixed top-0 left-0 right-0 z-20 shadow-sm&quot;&gt;&#10;            &lt;div className=&quot;flex gap-2 md:gap-4 mx-auto&quot;&gt;&#10;                &lt;Link href=&quot;/&quot; className={linkClass(&quot;/&quot;)}&gt;&#10;                    &lt;FaHome /&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Home&lt;/span&gt;&#10;                &lt;/Link&gt;&#10;                &lt;Link href=&quot;/add&quot; className={linkClass(&quot;/add&quot;)}&gt;&#10;                    &lt;FaPlus /&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Add&lt;/span&gt;&#10;                &lt;/Link&gt;&#10;                &lt;Link href=&quot;/unlock&quot; className={linkClass(&quot;/unlock&quot;)}&gt;&#10;                    &lt;FaLock /&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Unlock&lt;/span&gt;&#10;                &lt;/Link&gt;&#10;                {showInstall &amp;&amp; (&#10;                    &lt;button&#10;                        onClick={handleInstall}&#10;                        className=&quot;flex items-center gap-2 px-4 py-2 rounded-lg bg-green-500 text-white font-medium shadow hover:bg-green-600 transition&quot;&#10;                    &gt;&#10;                        &lt;FaDownload /&gt;{&quot; &quot;}&#10;                        &lt;span className=&quot;hidden sm:inline&quot;&gt;Download App&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/nav&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/PinModal.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/PinModal.js" />
              <option name="updatedContent" value="import { useState, useEffect } from &quot;react&quot;;&#10;import { FaTimes, FaLock } from &quot;react-icons/fa&quot;;&#10;import AuthService from &quot;../services/AuthService&quot;;&#10;&#10;export default function PinModal({ onSuccess, onCancel, isSetup = false }) {&#10;  const [pin, setPin] = useState(&quot;&quot;);&#10;  const [confirmPin, setConfirmPin] = useState(&quot;&quot;);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [showConfirm, setShowConfirm] = useState(false);&#10;&#10;  const handlePinChange = (e) =&gt; {&#10;    const value = e.target.value;&#10;    // Only allow numbers&#10;    if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 6) {&#10;      setPin(value);&#10;      setError(&quot;&quot;);&#10;    }&#10;  };&#10;&#10;  const handleConfirmPinChange = (e) =&gt; {&#10;    const value = e.target.value;&#10;    if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 6) {&#10;      setConfirmPin(value);&#10;      setError(&quot;&quot;);&#10;    }&#10;  };&#10;&#10;  const handleSubmit = (e) =&gt; {&#10;    e.preventDefault();&#10;    &#10;    if (isSetup) {&#10;      if (!showConfirm) {&#10;        if (pin.length &lt; 4) {&#10;          setError(&quot;PIN must be at least 4 digits&quot;);&#10;          return;&#10;        }&#10;        setShowConfirm(true);&#10;        return;&#10;      } else {&#10;        if (pin !== confirmPin) {&#10;          setError(&quot;PINs don't match&quot;);&#10;          return;&#10;        }&#10;        &#10;        AuthService.savePin(pin);&#10;        onSuccess();&#10;      }&#10;    } else {&#10;      // Verification mode&#10;      if (AuthService.verifyPin(pin)) {&#10;        onSuccess();&#10;      } else {&#10;        setError(&quot;Incorrect PIN&quot;);&#10;      }&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/40&quot;&gt;&#10;      &lt;div className=&quot;bg-white rounded-2xl shadow-2xl p-8 w-full max-w-sm relative&quot;&gt;&#10;        &lt;button&#10;          onClick={onCancel}&#10;          className=&quot;absolute top-3 right-3 text-gray-400 hover:text-gray-700&quot;&#10;          aria-label=&quot;Close&quot;&#10;        &gt;&#10;          &lt;FaTimes className=&quot;text-xl&quot; /&gt;&#10;        &lt;/button&gt;&#10;        &#10;        &lt;div className=&quot;text-center mb-6&quot;&gt;&#10;          &lt;FaLock className=&quot;text-4xl text-blue-600 mx-auto mb-4&quot; /&gt;&#10;          &lt;h2 className=&quot;text-xl font-bold text-blue-700&quot;&gt;&#10;            {isSetup &#10;              ? (showConfirm ? &quot;Confirm your PIN&quot; : &quot;Set up a PIN&quot;) &#10;              : &quot;Enter your PIN&quot;}&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-500 text-sm mt-2&quot;&gt;&#10;            {isSetup &#10;              ? &quot;Create a PIN to protect your passwords&quot; &#10;              : &quot;Enter your PIN to view this password&quot;}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;          &lt;input&#10;            type=&quot;password&quot;&#10;            placeholder={showConfirm ? &quot;Confirm PIN&quot; : &quot;Enter PIN&quot;}&#10;            value={showConfirm ? confirmPin : pin}&#10;            onChange={showConfirm ? handleConfirmPinChange : handlePinChange}&#10;            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition text-center text-2xl tracking-widest&quot;&#10;            autoFocus&#10;            inputMode=&quot;numeric&quot;&#10;          /&gt;&#10;          &#10;          {error &amp;&amp; (&#10;            &lt;div className=&quot;text-red-500 text-center font-medium&quot;&gt;{error}&lt;/div&gt;&#10;          )}&#10;          &#10;          &lt;button&#10;            type=&quot;submit&quot;&#10;            className=&quot;bg-blue-600 hover:bg-blue-700 px-6 py-3 text-white rounded-lg flex items-center gap-2 font-semibold shadow transition w-full justify-center&quot;&#10;          &gt;&#10;            {isSetup &#10;              ? (showConfirm ? &quot;Confirm PIN&quot; : &quot;Continue&quot;) &#10;              : &quot;Unlock&quot;}&#10;          &lt;/button&gt;&#10;        &lt;/form&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/AuthService.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/AuthService.js" />
              <option name="updatedContent" value="class AuthService {&#10;  // Check if biometric authentication is available&#10;  static async isBiometricAvailable() {&#10;    if (!window.PublicKeyCredential) {&#10;      return false;&#10;    }&#10;    &#10;    try {&#10;      return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();&#10;    } catch (error) {&#10;      console.error(&quot;Error checking biometric availability:&quot;, error);&#10;      return false;&#10;    }&#10;  }&#10;&#10;  // Authenticate with biometrics&#10;  static async authenticateWithBiometric() {&#10;    try {&#10;      const challenge = new Uint8Array(32);&#10;      window.crypto.getRandomValues(challenge);&#10;      &#10;      const publicKeyCredentialRequestOptions = {&#10;        challenge,&#10;        timeout: 60000,&#10;        userVerification: 'required'&#10;      };&#10;      &#10;      const credential = await navigator.credentials.get({&#10;        publicKey: publicKeyCredentialRequestOptions&#10;      });&#10;      &#10;      return !!credential;&#10;    } catch (error) {&#10;      console.error(&quot;Biometric authentication error:&quot;, error);&#10;      return false;&#10;    }&#10;  }&#10;&#10;  // Save PIN to localStorage (encrypted in production)&#10;  static savePin(pin) {&#10;    localStorage.setItem('securepass_pin', pin);&#10;  }&#10;&#10;  // Check if PIN exists&#10;  static hasPin() {&#10;    return !!localStorage.getItem('securepass_pin');&#10;  }&#10;&#10;  // Verify PIN&#10;  static verifyPin(pin) {&#10;    const savedPin = localStorage.getItem('securepass_pin');&#10;    return savedPin === pin;&#10;  }&#10;}&#10;&#10;export default AuthService;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>