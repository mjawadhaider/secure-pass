<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/add/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/add/page.js" />
              <option name="originalContent" value="import NavBar from &quot;../../components/NavBar&quot;;&#10;&#10;export default function AddPasswordPage() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;p-4&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold mb-4&quot;&gt;Add New Password&lt;/h2&gt;&#10;                &lt;form className=&quot;space-y-3 max-w-md&quot;&gt;&#10;                    &lt;input type=&quot;text&quot; placeholder=&quot;Title&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;button className=&quot;bg-blue-600 px-4 py-2 text-white rounded&quot;&gt;Save&lt;/button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import NavBar from &quot;../../components/NavBar&quot;;&#10;import { FaSave } from &quot;react-icons/fa&quot;;&#10;&#10;export default function AddPasswordPage() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;flex justify-center&quot;&gt;&#10;                &lt;div className=&quot;bg-white/90 rounded-2xl shadow-xl p-8 w-full max-w-md mt-6&quot;&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold mb-6 text-blue-700&quot;&gt;Add New Password&lt;/h2&gt;&#10;                    &lt;form className=&quot;space-y-5&quot;&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Title&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Username&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;password&quot;&#10;                            placeholder=&quot;Password&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 px-6 py-3 text-white rounded-lg flex items-center gap-2 font-semibold shadow transition&quot;&#10;                        &gt;&#10;                            &lt;FaSave /&gt; Save&#10;                        &lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/globals.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/globals.css" />
              <option name="originalContent" value="@import &quot;tailwindcss&quot;;&#10;/*@import &quot;tailwindcss/preflight&quot;;*/&#10;/*@tailwind utilities;*/&#10;&#10;:root {&#10;  --background: #3f3f3f;&#10;  --foreground: #333333;&#10;}&#10;&#10;@theme inline {&#10;  --color-background: var(--background);&#10;  --color-foreground: var(--foreground);&#10;  --font-sans: var(--font-geist-sans);&#10;  --font-mono: var(--font-geist-mono);&#10;}&#10;&#10;@media (prefers-color-scheme: dark) {&#10;  :root {&#10;    --background: #262626;&#10;    --foreground: #ededed;&#10;  }&#10;}&#10;&#10;body {&#10;  background: linear-gradient(135deg, #4b6cb7 0%, #182848 100%);&#10;  min-height: 100vh;&#10;  /*color: var(--foreground);*/&#10;  font-family: Arial, Helvetica, sans-serif;&#10;&#10;  main {&#10;    height: calc(100vh - 83px);&#10;  }&#10;}&#10;&#10;.text-input {&#10;    border: 1px solid #d1d5db; /* gray-300 */&#10;    padding: 0.75rem; /* p-3 */&#10;    width: 100%; /* w-full */&#10;    border-radius: 0.5rem; /* rounded-lg */&#10;    transition: all 0.2s ease-in-out; /* transition */&#10;    color: black;&#10;&#10;  &amp;:focus {&#10;    border-color: #3b82f6; /* blue-500 */&#10;    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25); /* blue-100 */&#10;    outline: none; /* remove default outline */&#10;  }&#10;}&#10;&#10;/* Add these at the end of your globals.css file */&#10;&#10;@keyframes fadeIn {&#10;  from { opacity: 0; }&#10;  to { opacity: 1; }&#10;}&#10;&#10;@keyframes scaleIn {&#10;  from { transform: scale(0.95); opacity: 0; }&#10;  to { transform: scale(1); opacity: 1; }&#10;}&#10;&#10;.animate-fadeIn {&#10;  animation: fadeIn 0.3s ease-in-out;&#10;}&#10;&#10;.animate-scaleIn {&#10;  animation: scaleIn 0.3s ease-out;&#10;}&#10;" />
              <option name="updatedContent" value="@import &quot;tailwindcss&quot;;&#10;&#10;:root {&#10;  /* New modern color palette */&#10;  --color-primary: #6366f1;&#10;  --color-primary-light: #818cf8;&#10;  --color-primary-dark: #4f46e5;&#10;  --color-secondary: #10b981;&#10;  --color-accent: #f43f5e;&#10;  --color-background: #f9fafb;&#10;  --color-card: #ffffff;&#10;  --color-text: #1f2937;&#10;  --color-text-light: #6b7280;&#10;  --color-border: #e5e7eb;&#10;}&#10;&#10;body {&#10;  /* Subtle, modern gradient background */&#10;  background: linear-gradient(120deg, #f8fafc 0%, #e2e8f0 100%);&#10;  min-height: 100vh;&#10;  font-family: 'Inter', system-ui, -apple-system, sans-serif;&#10;  color: var(--color-text);&#10;}&#10;&#10;/* Glass effect for cards */&#10;.glass {&#10;  background: rgba(255, 255, 255, 0.7);&#10;  backdrop-filter: blur(10px);&#10;  border: 1px solid rgba(255, 255, 255, 0.2);&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05);&#10;}&#10;&#10;/* For dark glassy elements */&#10;.glass-dark {&#10;  background: rgba(31, 41, 55, 0.8);&#10;  backdrop-filter: blur(10px);&#10;  border: 1px solid rgba(255, 255, 255, 0.1);&#10;}&#10;&#10;/* Smooth animations */&#10;@keyframes fadeIn {&#10;  from { opacity: 0; }&#10;  to { opacity: 1; }&#10;}&#10;&#10;@keyframes scaleIn {&#10;  from { transform: scale(0.95); opacity: 0; }&#10;  to { transform: scale(1); opacity: 1; }&#10;}&#10;&#10;@keyframes slideUp {&#10;  from { transform: translateY(10px); opacity: 0; }&#10;  to { transform: translateY(0); opacity: 1; }&#10;}&#10;&#10;@keyframes pulse {&#10;  0%, 100% { transform: scale(1); }&#10;  50% { transform: scale(1.05); }&#10;}&#10;&#10;/* Animation utility classes */&#10;.animate-fadeIn {&#10;  animation: fadeIn 0.3s ease-in-out;&#10;}&#10;&#10;.animate-scaleIn {&#10;  animation: scaleIn 0.3s ease-out;&#10;}&#10;&#10;.animate-slideUp {&#10;  animation: slideUp 0.3s ease-out;&#10;}&#10;&#10;.animate-pulse {&#10;  animation: pulse 2s infinite;&#10;}&#10;&#10;/* Custom scrollbar */&#10;::-webkit-scrollbar {&#10;  width: 8px;&#10;}&#10;&#10;::-webkit-scrollbar-track {&#10;  background: transparent;&#10;}&#10;&#10;::-webkit-scrollbar-thumb {&#10;  background: var(--color-primary-light);&#10;  border-radius: 4px;&#10;}&#10;&#10;::-webkit-scrollbar-thumb:hover {&#10;  background: var(--color-primary);&#10;}&#10;&#10;/* Interactive button styles */&#10;.btn-primary {&#10;  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));&#10;  color: white;&#10;  padding: 0.75rem 1.5rem;&#10;  border-radius: 0.75rem;&#10;  font-weight: 600;&#10;  transition: all 0.3s ease;&#10;  box-shadow: 0 4px 14px rgba(99, 102, 241, 0.3);&#10;}&#10;&#10;.btn-primary:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);&#10;}&#10;&#10;.btn-secondary {&#10;  background: linear-gradient(135deg, var(--color-secondary), #0d9488);&#10;  color: white;&#10;  padding: 0.75rem 1.5rem;&#10;  border-radius: 0.75rem;&#10;  font-weight: 600;&#10;  transition: all 0.3s ease;&#10;  box-shadow: 0 4px 14px rgba(16, 185, 129, 0.3);&#10;}&#10;&#10;.btn-secondary:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);&#10;}&#10;&#10;.btn-danger {&#10;  background: linear-gradient(135deg, var(--color-accent), #e11d48);&#10;  color: white;&#10;  padding: 0.75rem 1.5rem;&#10;  border-radius: 0.75rem;&#10;  font-weight: 600;&#10;  transition: all 0.3s ease;&#10;  box-shadow: 0 4px 14px rgba(244, 63, 94, 0.3);&#10;}&#10;&#10;.btn-danger:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 6px 20px rgba(244, 63, 94, 0.4);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import {FaEye, FaFingerprint, FaPencilAlt, FaPlus, FaSearch, FaTrash, FaUserCircle} from &quot;react-icons/fa&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import AddNewPasswordModal from &quot;../components/CreateUpdatePasswordModal&quot;;&#10;import ShowPasswordModal from &quot;@/components/ShowPasswordModal&quot;;&#10;import PinModal from &quot;@/components/PinModal&quot;;&#10;import AuthService from &quot;@/services/AuthService&quot;;&#10;&#10;export default function HomePage() {&#10;    const [passwords, setPasswords] = useState([]);&#10;    const [filteredPasswords, setFilteredPasswords] = useState([]);&#10;    const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;    const [showModal, setShowModal] = useState(false);&#10;    const [editPassword, setEditPassword] = useState(null);&#10;    const [viewPassword, setViewPassword] = useState(null);&#10;    const [isAuthenticating, setIsAuthenticating] = useState(false);&#10;    const [selectedPasswordForAuth, setSelectedPasswordForAuth] = useState(null);&#10;    const [passwordToDelete, setPasswordToDelete] = useState(null);&#10;    const [biometricAvailable, setBiometricAvailable] = useState(false);&#10;    const [showPinSetup, setShowPinSetup] = useState(false);&#10;    const [logs, setLogs] = useState([]);&#10;    const [authAction, setAuthAction] = useState(null);&#10;&#10;    const addLogs = (message) =&gt; {&#10;        setLogs(prevLogs =&gt; [...prevLogs, `${message}\n`]);&#10;    }&#10;&#10;    // Load passwords from localStorage on mount&#10;    useEffect(() =&gt; {&#10;        loadPasswords();&#10;    }, []);&#10;&#10;    // Update filteredPasswords when passwords change&#10;    useEffect(() =&gt; {&#10;        setFilteredPasswords(passwords);&#10;    }, [passwords]);&#10;&#10;    // Save passwords to localStorage whenever passwords change&#10;    useEffect(() =&gt; {&#10;        if (typeof window !== &quot;undefined&quot;) {&#10;            localStorage.setItem(&quot;passwords&quot;, JSON.stringify(passwords));&#10;            // Optional: console.log for debugging&#10;            // console.log('Passwords saved to localStorage', passwords);&#10;        }&#10;    }, [passwords]);&#10;&#10;    // Check for biometric availability on mount&#10;    useEffect(() =&gt; {&#10;        const checkBiometricAvailability = async () =&gt; {&#10;            const available = await AuthService.isBiometricAvailable();&#10;            addLogs(`isBiometricAvailable: ${available}`);&#10;            setBiometricAvailable(available);&#10;&#10;            // If no PIN is set, show PIN setup on first load&#10;            if (!AuthService.hasPin()) {&#10;                setShowPinSetup(true);&#10;            }&#10;        };&#10;&#10;        checkBiometricAvailability();&#10;    }, []);&#10;&#10;    function loadPasswords() {&#10;        const stored = typeof window !== &quot;undefined&quot; ? localStorage.getItem(&quot;passwords&quot;) : null;&#10;        if (stored) {&#10;            try {&#10;                setPasswords(JSON.parse(stored));&#10;            } catch {&#10;                setPasswords([]);&#10;            }&#10;        }&#10;    }&#10;&#10;    function handleSearch(value) {&#10;        setSearchTerm(value);&#10;        if (!value.trim()) {&#10;            setFilteredPasswords(passwords);&#10;            return;&#10;        }&#10;        const filtered = passwords.filter(password =&gt;&#10;            password.title?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.username?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.url?.toLowerCase().includes(value.toLowerCase())&#10;        );&#10;        setFilteredPasswords(filtered);&#10;    }&#10;&#10;    function handleKeyDown(e) {&#10;        const value = e.target.value;&#10;        handleSearch(value);&#10;    }&#10;&#10;    function addNewPassword(newPassword, isEdit = false) {&#10;        if (isEdit &amp;&amp; newPassword.id) {&#10;            setPasswords(prev =&gt;&#10;                prev.map(p =&gt; (p.id === newPassword.id ? newPassword : p))&#10;            );&#10;        } else {&#10;            setPasswords(prev =&gt; [...prev, newPassword]);&#10;        }&#10;        setSearchTerm(&quot;&quot;);&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    function onCloseNewPasswordModal() {&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    async function validateDeviceAuthentication(callbackFunc, ...args) {&#10;        // First check if we have a PIN set up&#10;        const hasPin = AuthService.hasPin();&#10;        addLogs(`Has PIN: ${hasPin}`);&#10;        addLogs(`biometricAvailable: ${biometricAvailable}`);&#10;&#10;        // If biometrics are available, try that first&#10;        if (biometricAvailable) {&#10;            setIsAuthenticating(true);&#10;            try {&#10;                const response = await AuthService.authenticateLocal();&#10;                setLogs((prevLogs) =&gt; [...prevLogs, ...response.logs]);&#10;                if (response.success) {&#10;                    if (!callbackFunc) {&#10;                        throw new Error(&quot;Callback function is required for biometric authentication&quot;);&#10;                    }&#10;                    callbackFunc(...args);&#10;                    setIsAuthenticating(false);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;Biometric authentication failed:&quot;, error);&#10;            }&#10;&#10;            // Biometric failed, fall back to PIN&#10;            setIsAuthenticating(false);&#10;        }&#10;&#10;        // If we have a PIN, show PIN verification&#10;        if (hasPin) {&#10;            setIsAuthenticating(true);&#10;        } else {&#10;            // No PIN set up, show PIN setup&#10;            setShowPinSetup(true);&#10;        }&#10;    }&#10;&#10;    async function handleEditPassword(password) {&#10;        setEditPassword(password);&#10;        setAuthAction('edit'); // Set what action we're authenticating for&#10;        await validateDeviceAuthentication(setShowModal, true);&#10;    }&#10;&#10;    async function handleViewPassword(password) {&#10;        setSelectedPasswordForAuth(password);&#10;        setAuthAction('view'); // Set action to view&#10;        await validateDeviceAuthentication(setViewPassword, password);&#10;    }&#10;&#10;    async function handleDeletePassword(password) {&#10;        setPasswordToDelete(password);&#10;        setAuthAction('delete'); // Set action to delete&#10;        await validateDeviceAuthentication(confirmDelete, password);&#10;    }&#10;&#10;    function confirmDelete(password) {&#10;        const updatedPasswords = passwords.filter(p =&gt; p.id !== password.id);&#10;        setPasswords(updatedPasswords);&#10;        setPasswordToDelete(null);&#10;    }&#10;&#10;    function handlePinSuccess() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;&#10;        // Handle different actions based on authAction&#10;        if (authAction === 'view' &amp;&amp; selectedPasswordForAuth) {&#10;            setViewPassword(selectedPasswordForAuth);&#10;            setSelectedPasswordForAuth(null);&#10;        } else if (authAction === 'edit' &amp;&amp; editPassword) {&#10;            setShowModal(true); // Open the edit modal&#10;        } else if (authAction === 'delete' &amp;&amp; passwordToDelete) {&#10;            confirmDelete(passwordToDelete);&#10;        }&#10;&#10;        setAuthAction(null); // Reset action&#10;    }&#10;&#10;    function handlePinCancel() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;        setSelectedPasswordForAuth(null);&#10;        setAuthAction(null); // Reset action&#10;&#10;        // Clear edit state on cancel&#10;        if (authAction === 'edit') {&#10;            setEditPassword(null);&#10;        }&#10;&#10;        // Clear delete state on cancel&#10;        if (authAction === 'delete') {&#10;            setPasswordToDelete(null);&#10;        }&#10;    }&#10;&#10;    function closeViewModal() {&#10;        setViewPassword(null);&#10;    }&#10;&#10;    function onClickOutsideLoader(e) {&#10;        console.log(e, 'clicked outside loader');&#10;        e.stopPropagation();&#10;        setIsAuthenticating(false);&#10;    }&#10;&#10;    // Make sure PIN setup works first time&#10;    useEffect(() =&gt; {&#10;        // Check if we should show PIN setup on first visit&#10;        if (typeof window !== &quot;undefined&quot; &amp;&amp; !localStorage.getItem('securepass_pin_setup_shown')) {&#10;            setShowPinSetup(true);&#10;            localStorage.setItem('securepass_pin_setup_shown', 'true');&#10;        }&#10;    }, []);&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen pb-20&quot;&gt;&#10;            &lt;div className=&quot;relative w-full max-w-md mx-auto mt-4 mb-8&quot;&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search passwords...&quot;&#10;                    defaultValue={searchTerm}&#10;                    onKeyUp={handleKeyDown}&#10;                    className=&quot;w-full pl-12 pr-4 py-3 rounded-xl text-black bg-white/80 backdrop-blur-sm focus:bg-white&#10;                    shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all border border-gray-200&quot;&#10;                /&gt;&#10;                &lt;FaSearch className=&quot;absolute left-4 top-1/2 -translate-y-1/2 text-gray-500&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Add Button */}&#10;            &lt;button&#10;                onClick={() =&gt; setShowModal(true)}&#10;                className=&quot;fixed bottom-8 right-8 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600&#10;                hover:to-indigo-700 text-white rounded-full p-4 shadow-xl flex items-center justify-center z-30&#10;                transition-all duration-300 transform hover:scale-105&quot;&#10;                aria-label=&quot;Add new password&quot;&#10;            &gt;&#10;                &lt;FaPlus className=&quot;text-2xl&quot;/&gt;&#10;            &lt;/button&gt;&#10;&#10;            {/* Add/Edit Modal */}&#10;            {showModal &amp;&amp; (&#10;                &lt;AddNewPasswordModal&#10;                    addNewPassword={addNewPassword}&#10;                    onCloseModal={onCloseNewPasswordModal}&#10;                    editPassword={editPassword}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Setup Modal */}&#10;            {showPinSetup &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                    isSetup={true}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Verification Modal */}&#10;            {isAuthenticating &amp;&amp; !biometricAvailable &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* Biometric Authentication Indicator */}&#10;            {isAuthenticating &amp;&amp; biometricAvailable &amp;&amp; (&#10;                &lt;div&#10;                    className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm animate-fadeIn&quot;&#10;                    onClick={onClickOutsideLoader}&gt;&#10;                    &lt;div className=&quot;bg-white rounded-2xl shadow-2xl p-8 text-center transform animate-scaleIn&quot;&gt;&#10;                        &lt;FaFingerprint className=&quot;text-6xl text-blue-600 mx-auto mb-4 animate-pulse&quot;/&gt;&#10;                        &lt;h2 className=&quot;text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent&quot;&gt;&#10;                            Verifying Identity&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-500 mt-2&quot;&gt;&#10;                            Use your device&amp;#39;s security method&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* View Password Modal */}&#10;            {viewPassword &amp;&amp; (&#10;                &lt;ShowPasswordModal closeViewModal={closeViewModal} viewPassword={viewPassword}/&gt;&#10;            )}&#10;&#10;            &lt;h2 className=&quot;text-2xl font-bold mb-6 text-white tracking-tight flex items-center&quot;&gt;&#10;                &lt;span className=&quot;bg-gradient-to-r from-blue-400 to-indigo-500 bg-clip-text text-transparent&quot;&gt;&#10;                    Saved Passwords&#10;                &lt;/span&gt;&#10;            &lt;/h2&gt;&#10;&#10;            {filteredPasswords.length === 0 ? (&#10;                &lt;div className=&quot;bg-white/80 backdrop-blur-sm p-8 rounded-xl shadow-lg text-center&quot;&gt;&#10;                    &lt;p className=&quot;text-gray-600&quot;&gt;No passwords found. Add your first password!&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;ul className=&quot;space-y-4&quot;&gt;&#10;                    {filteredPasswords.map((item) =&gt; (&#10;                        &lt;li&#10;                            key={item.id}&#10;                            className=&quot;bg-white/90 backdrop-blur-sm p-5 rounded-xl shadow-lg flex items-center&#10;                            justify-between hover:shadow-xl transition-all duration-300 border border-gray-100&#10;                            hover:border-blue-200 hover:bg-white&quot;&#10;                        &gt;&#10;                            &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                                &lt;div&#10;                                    className=&quot;bg-gradient-to-br from-blue-500 to-indigo-600 p-3 rounded-lg text-white&quot;&gt;&#10;                                    &lt;FaUserCircle className=&quot;text-2xl&quot;/&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;p className=&quot;font-semibold text-lg text-gray-800&quot;&gt;{item.title}&lt;/p&gt;&#10;                                    &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;{item.username}&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                                &lt;button&#10;                                    className=&quot;bg-gray-800 hover:bg-gray-900 px-4 py-2 text-white rounded-lg flex&#10;                                    items-center gap-2 shadow transition-all duration-200 hover:shadow-md&quot;&#10;                                    onClick={() =&gt; handleViewPassword(item)}&#10;                                &gt;&#10;                                    &lt;FaEye/&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;View&lt;/span&gt;&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                    className=&quot;bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700&#10;                                    px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition-all duration-200&#10;                                    hover:shadow-md&quot;&#10;                                    onClick={() =&gt; handleEditPassword(item)}&#10;                                    aria-label=&quot;Edit&quot;&#10;                                &gt;&#10;                                    &lt;FaPencilAlt/&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Edit&lt;/span&gt;&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                    className=&quot;bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700&#10;                                    px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition-all duration-200&#10;                                    hover:shadow-md&quot;&#10;                                    onClick={() =&gt; handleDeletePassword(item)}&#10;                                    aria-label=&quot;Delete&quot;&gt;&#10;                                    &lt;FaTrash/&gt;&#10;                                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Delete&lt;/span&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/li&gt;&#10;                    ))}&#10;                &lt;/ul&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import {FaEye, FaFingerprint, FaPlus, FaSearch, FaUserCircle, FaPencilAlt, FaTrash, FaKey, FaLock} from &quot;react-icons/fa&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import AddNewPasswordModal from &quot;../components/CreateUpdatePasswordModal&quot;;&#10;import ShowPasswordModal from &quot;@/components/ShowPasswordModal&quot;;&#10;import PinModal from &quot;@/components/PinModal&quot;;&#10;import AuthService from &quot;@/services/AuthService&quot;;&#10;&#10;export default function HomePage() {&#10;    const [passwords, setPasswords] = useState([]);&#10;    const [filteredPasswords, setFilteredPasswords] = useState([]);&#10;    const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;    const [showModal, setShowModal] = useState(false);&#10;    const [editPassword, setEditPassword] = useState(null);&#10;    const [viewPassword, setViewPassword] = useState(null);&#10;    const [isAuthenticating, setIsAuthenticating] = useState(false);&#10;    const [selectedPasswordForAuth, setSelectedPasswordForAuth] = useState(null);&#10;    const [passwordToDelete, setPasswordToDelete] = useState(null);&#10;    const [biometricAvailable, setBiometricAvailable] = useState(false);&#10;    const [showPinSetup, setShowPinSetup] = useState(false);&#10;    const [logs, setLogs] = useState([]);&#10;    const [authAction, setAuthAction] = useState(null);&#10;&#10;    const addLogs = (message) =&gt; {&#10;        setLogs(prevLogs =&gt; [...prevLogs, `${message}\n`]);&#10;    }&#10;&#10;    // Load passwords from localStorage on mount&#10;    useEffect(() =&gt; {&#10;        loadPasswords();&#10;    }, []);&#10;&#10;    // Update filteredPasswords when passwords change&#10;    useEffect(() =&gt; {&#10;        setFilteredPasswords(passwords);&#10;    }, [passwords]);&#10;&#10;    // Save passwords to localStorage whenever passwords change&#10;    useEffect(() =&gt; {&#10;        if (typeof window !== &quot;undefined&quot;) {&#10;            localStorage.setItem(&quot;passwords&quot;, JSON.stringify(passwords));&#10;            // Optional: console.log for debugging&#10;            // console.log('Passwords saved to localStorage', passwords);&#10;        }&#10;    }, [passwords]);&#10;&#10;    // Check for biometric availability on mount&#10;    useEffect(() =&gt; {&#10;        const checkBiometricAvailability = async () =&gt; {&#10;            const available = await AuthService.isBiometricAvailable();&#10;            addLogs(`isBiometricAvailable: ${available}`);&#10;            setBiometricAvailable(available);&#10;&#10;            // If no PIN is set, show PIN setup on first load&#10;            if (!AuthService.hasPin()) {&#10;                setShowPinSetup(true);&#10;            }&#10;        };&#10;&#10;        checkBiometricAvailability();&#10;    }, []);&#10;&#10;    function loadPasswords() {&#10;        const stored = typeof window !== &quot;undefined&quot; ? localStorage.getItem(&quot;passwords&quot;) : null;&#10;        if (stored) {&#10;            try {&#10;                setPasswords(JSON.parse(stored));&#10;            } catch {&#10;                setPasswords([]);&#10;            }&#10;        }&#10;    }&#10;&#10;    function handleSearch(value) {&#10;        setSearchTerm(value);&#10;        if (!value.trim()) {&#10;            setFilteredPasswords(passwords);&#10;            return;&#10;        }&#10;        const filtered = passwords.filter(password =&gt;&#10;            password.title?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.username?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.url?.toLowerCase().includes(value.toLowerCase())&#10;        );&#10;        setFilteredPasswords(filtered);&#10;    }&#10;&#10;    function handleKeyDown(e) {&#10;        const value = e.target.value;&#10;        handleSearch(value);&#10;    }&#10;&#10;    function addNewPassword(newPassword, isEdit = false) {&#10;        if (isEdit &amp;&amp; newPassword.id) {&#10;            setPasswords(prev =&gt;&#10;                prev.map(p =&gt; (p.id === newPassword.id ? newPassword : p))&#10;            );&#10;        } else {&#10;            setPasswords(prev =&gt; [...prev, newPassword]);&#10;        }&#10;        setSearchTerm(&quot;&quot;);&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    function onCloseNewPasswordModal() {&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    async function validateDeviceAuthentication(callbackFunc, ...args) {&#10;        // First check if we have a PIN set up&#10;        const hasPin = AuthService.hasPin();&#10;        addLogs(`Has PIN: ${hasPin}`);&#10;        addLogs(`biometricAvailable: ${biometricAvailable}`);&#10;&#10;        // If biometrics are available, try that first&#10;        if (biometricAvailable) {&#10;            setIsAuthenticating(true);&#10;            try {&#10;                const response = await AuthService.authenticateLocal();&#10;                setLogs((prevLogs) =&gt; [...prevLogs, ...response.logs]);&#10;                if (response.success) {&#10;                    if (!callbackFunc) {&#10;                        throw new Error(&quot;Callback function is required for biometric authentication&quot;);&#10;                    }&#10;                    callbackFunc(...args);&#10;                    setIsAuthenticating(false);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;Biometric authentication failed:&quot;, error);&#10;            }&#10;&#10;            // Biometric failed, fall back to PIN&#10;            setIsAuthenticating(false);&#10;        }&#10;&#10;        // If we have a PIN, show PIN verification&#10;        if (hasPin) {&#10;            setIsAuthenticating(true);&#10;        } else {&#10;            // No PIN set up, show PIN setup&#10;            setShowPinSetup(true);&#10;        }&#10;    }&#10;&#10;    async function handleEditPassword(password) {&#10;        setEditPassword(password);&#10;        setAuthAction('edit'); // Set what action we're authenticating for&#10;        await validateDeviceAuthentication(setShowModal, true);&#10;    }&#10;&#10;    async function handleViewPassword(password) {&#10;        setSelectedPasswordForAuth(password);&#10;        setAuthAction('view'); // Set action to view&#10;        await validateDeviceAuthentication(setViewPassword, password);&#10;    }&#10;&#10;    async function handleDeletePassword(password) {&#10;        setPasswordToDelete(password);&#10;        setAuthAction('delete'); // Set action to delete&#10;        await validateDeviceAuthentication(confirmDelete, password);&#10;    }&#10;&#10;    function confirmDelete(password) {&#10;        const updatedPasswords = passwords.filter(p =&gt; p.id !== password.id);&#10;        setPasswords(updatedPasswords);&#10;        setPasswordToDelete(null);&#10;    }&#10;&#10;    function handlePinSuccess() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;&#10;        // Handle different actions based on authAction&#10;        if (authAction === 'view' &amp;&amp; selectedPasswordForAuth) {&#10;            setViewPassword(selectedPasswordForAuth);&#10;            setSelectedPasswordForAuth(null);&#10;        } else if (authAction === 'edit' &amp;&amp; editPassword) {&#10;            setShowModal(true); // Open the edit modal&#10;        } else if (authAction === 'delete' &amp;&amp; passwordToDelete) {&#10;            confirmDelete(passwordToDelete);&#10;        }&#10;&#10;        setAuthAction(null); // Reset action&#10;    }&#10;&#10;    function handlePinCancel() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;        setSelectedPasswordForAuth(null);&#10;        setAuthAction(null); // Reset action&#10;&#10;        // Clear edit state on cancel&#10;        if (authAction === 'edit') {&#10;            setEditPassword(null);&#10;        }&#10;&#10;        // Clear delete state on cancel&#10;        if (authAction === 'delete') {&#10;            setPasswordToDelete(null);&#10;        }&#10;    }&#10;&#10;    function closeViewModal() {&#10;        setViewPassword(null);&#10;    }&#10;&#10;    function onClickOutsideLoader(e) {&#10;        console.log(e, 'clicked outside loader');&#10;        e.stopPropagation();&#10;        setIsAuthenticating(false);&#10;    }&#10;&#10;    // Make sure PIN setup works first time&#10;    useEffect(() =&gt; {&#10;        // Check if we should show PIN setup on first visit&#10;        if (typeof window !== &quot;undefined&quot; &amp;&amp; !localStorage.getItem('securepass_pin_setup_shown')) {&#10;            setShowPinSetup(true);&#10;            localStorage.setItem('securepass_pin_setup_shown', 'true');&#10;        }&#10;    }, []);&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen pb-20 px-4 max-w-2xl mx-auto pt-20&quot;&gt;&#10;            {/* Search Bar */}&#10;            &lt;div className=&quot;relative w-full mx-auto mb-8&quot;&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search passwords...&quot;&#10;                    defaultValue={searchTerm}&#10;                    onKeyUp={handleKeyDown}&#10;                    className=&quot;w-full pl-12 pr-4 py-3.5 rounded-xl text-gray-800 glass focus:outline-none &#10;                    focus:ring-2 focus:ring-indigo-400 transition-all duration-300 shadow-sm&quot;&#10;                /&gt;&#10;                &lt;FaSearch className=&quot;absolute left-4 top-1/2 -translate-y-1/2 text-gray-500&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Add Button */}&#10;            &lt;button&#10;                onClick={() =&gt; setShowModal(true)}&#10;                className=&quot;fixed bottom-6 right-6 bg-white p-3.5 rounded-full shadow-lg hover:shadow-xl&#10;                text-indigo-600 z-30 transition-all duration-300 transform hover:scale-110 border border-indigo-100&quot;&#10;                aria-label=&quot;Add new password&quot;&#10;            &gt;&#10;                &lt;FaPlus className=&quot;text-xl&quot;/&gt;&#10;            &lt;/button&gt;&#10;&#10;            {/* Section Title */}&#10;            &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                &lt;div className=&quot;bg-indigo-500 p-2 rounded-lg text-white shadow-md&quot;&gt;&#10;                    &lt;FaKey className=&quot;text-xl&quot;/&gt;&#10;                &lt;/div&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold text-gray-800&quot;&gt;&#10;                    Your Passwords&#10;                &lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &#10;            {/* Password List */}&#10;            {filteredPasswords.length === 0 ? (&#10;                &lt;div className=&quot;glass p-8 rounded-xl text-center animate-fadeIn&quot;&gt;&#10;                    &lt;div className=&quot;w-16 h-16 rounded-full bg-indigo-100 text-indigo-500 flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                        &lt;FaLock className=&quot;text-2xl&quot;/&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;p className=&quot;text-gray-600 mb-2&quot;&gt;No passwords found&lt;/p&gt;&#10;                    &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;Add your first password using the + button&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;ul className=&quot;space-y-3&quot;&gt;&#10;                    {filteredPasswords.map((item) =&gt; (&#10;                        &lt;li&#10;                            key={item.id}&#10;                            className=&quot;glass p-4 rounded-xl flex items-center justify-between hover:shadow-md &#10;                            transition-all duration-300 border-l-4 border-indigo-500 animate-slideUp&quot;&#10;                        &gt;&#10;                            &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                                &lt;div className=&quot;bg-indigo-100 p-2.5 rounded-lg text-indigo-600&quot;&gt;&#10;                                    &lt;FaUserCircle className=&quot;text-xl&quot;/&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;p className=&quot;font-medium text-gray-800&quot;&gt;{item.title}&lt;/p&gt;&#10;                                    &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;{item.username}&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                                &lt;button&#10;                                    onClick={() =&gt; handleViewPassword(item)}&#10;                                    className=&quot;p-2 text-gray-600 hover:text-indigo-700 hover:bg-indigo-50 rounded-lg &#10;                                    transition-colors duration-200&quot;&#10;                                    aria-label=&quot;View&quot;&#10;                                &gt;&#10;                                    &lt;FaEye/&gt;&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                    onClick={() =&gt; handleEditPassword(item)}&#10;                                    className=&quot;p-2 text-gray-600 hover:text-indigo-700 hover:bg-indigo-50 rounded-lg &#10;                                    transition-colors duration-200&quot;&#10;                                    aria-label=&quot;Edit&quot;&#10;                                &gt;&#10;                                    &lt;FaPencilAlt/&gt;&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                    onClick={() =&gt; handleDeletePassword(item)}&#10;                                    className=&quot;p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg &#10;                                    transition-colors duration-200&quot;&#10;                                    aria-label=&quot;Delete&quot;&#10;                                &gt;&#10;                                    &lt;FaTrash/&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/li&gt;&#10;                    ))}&#10;                &lt;/ul&gt;&#10;            )}&#10;            &#10;            {/* Biometric Authentication Indicator */}&#10;            {isAuthenticating &amp;&amp; biometricAvailable &amp;&amp; (&#10;                &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-gray-900/40 backdrop-blur-sm animate-fadeIn&quot; &#10;                     onClick={onClickOutsideLoader}&gt;&#10;                    &lt;div className=&quot;bg-white rounded-2xl shadow-xl p-8 text-center transform animate-scaleIn max-w-xs w-full mx-4&quot;&gt;&#10;                        &lt;FaFingerprint className=&quot;text-6xl text-indigo-500 mx-auto mb-6 animate-pulse&quot;/&gt;&#10;                        &lt;h2 className=&quot;text-xl font-semibold text-gray-800 mb-2&quot;&gt;&#10;                            Verifying Identity&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-500&quot;&gt;&#10;                            Use your device&amp;#39;s security method&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;            &#10;            {/* Add/Edit Modal */}&#10;            {showModal &amp;&amp; (&#10;                &lt;AddNewPasswordModal&#10;                    addNewPassword={addNewPassword}&#10;                    onCloseModal={onCloseNewPasswordModal}&#10;                    editPassword={editPassword}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Setup Modal */}&#10;            {showPinSetup &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                    isSetup={true}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Verification Modal */}&#10;            {isAuthenticating &amp;&amp; !biometricAvailable &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* View Password Modal */}&#10;            {viewPassword &amp;&amp; (&#10;                &lt;ShowPasswordModal closeViewModal={closeViewModal} viewPassword={viewPassword}/&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/CreateUpdatePasswordModal.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/CreateUpdatePasswordModal.js" />
              <option name="originalContent" value="import {FaPlus, FaTimes, FaSave} from &quot;react-icons/fa&quot;;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;&#10;export default function AddPasswordPage({addNewPassword, onCloseModal, editPassword}) {&#10;    const [payload, setPayload] = useState({&#10;        title: &quot;&quot;,&#10;        username: &quot;&quot;,&#10;        password: &quot;&quot;,&#10;        url: &quot;&quot;,&#10;    });&#10;    const [msgConfig, setMsgConfig] = useState({&#10;        msg: '',&#10;        show: false,&#10;        type: 'error',&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        if (editPassword) {&#10;            setPayload({&#10;                title: editPassword.title || &quot;&quot;,&#10;                username: editPassword.username || &quot;&quot;,&#10;                password: editPassword.password || &quot;&quot;,&#10;                url: editPassword.url || &quot;&quot;,&#10;                id: editPassword.id,&#10;            });&#10;        } else {&#10;            setPayload({&#10;                title: &quot;&quot;,&#10;                username: &quot;&quot;,&#10;                password: &quot;&quot;,&#10;                url: &quot;&quot;,&#10;            });&#10;        }&#10;    }, [editPassword]);&#10;&#10;    const closeModal = () =&gt; onCloseModal();&#10;&#10;    const showError = (message) =&gt; {&#10;        setMsgConfig({&#10;            msg: message,&#10;            show: true,&#10;            type: 'error',&#10;        })&#10;    }&#10;&#10;    const handleAddPassword = (e) =&gt; {&#10;        e.preventDefault();&#10;        if (!payload || !payload.title.trim() || !payload.username.trim() || !payload.password.trim()) {&#10;            return showError('Please fill in all fields');&#10;        }&#10;        addNewPassword(&#10;            {&#10;                id: payload.id || Date.now(),&#10;                url: payload.url || &quot;&quot;,&#10;                title: payload.title,&#10;                username: payload.username,&#10;                password: payload.password,&#10;            },&#10;            !!editPassword&#10;        );&#10;        closeModal();&#10;    };&#10;&#10;    const updatePayload = (e) =&gt; {&#10;        setPayload((prev) =&gt; ({&#10;            ...prev,&#10;            [e.target.name]: e.target.value,&#10;        }));&#10;    }&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;fixed inset-0 z-40 flex items-center justify-center bg-black/50 backdrop-blur-sm animate-fadeIn&quot;&gt;&#10;                &lt;div className=&quot;bg-white rounded-2xl shadow-2xl p-8 w-full max-w-sm relative border border-gray-100 transform animate-scaleIn&quot;&gt;&#10;                    &lt;button&#10;                        onClick={closeModal}&#10;                        className=&quot;absolute top-4 right-4 text-gray-400 hover:text-gray-700 transition-colors duration-200&quot;&#10;                        aria-label=&quot;Close&quot;&#10;                    &gt;&#10;                        &lt;FaTimes className=&quot;text-xl&quot;/&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold mb-6 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent&quot;&gt;&#10;                        {editPassword ? &quot;Edit Password&quot; : &quot;Add New Password&quot;}&#10;                    &lt;/h2&gt;&#10;                    &lt;form className=&quot;space-y-5&quot; onSubmit={handleAddPassword}&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1 ml-1&quot;&gt;Title&lt;/label&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                placeholder=&quot;Title&quot;&#10;                                name=&quot;title&quot;&#10;                                value={payload.title}&#10;                                onChange={updatePayload}&#10;                                className=&quot;w-full px-4 py-3 rounded-xl border border-gray-300 focus:border-blue-500&#10;                                focus:ring-2 focus:ring-blue-200 transition-all duration-200 bg-white/90&quot;&#10;                                required&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1 ml-1&quot;&gt;Username&lt;/label&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                placeholder=&quot;Username&quot;&#10;                                name=&quot;username&quot;&#10;                                value={payload.username}&#10;                                onChange={updatePayload}&#10;                                className=&quot;w-full px-4 py-3 rounded-xl border border-gray-300 focus:border-blue-500&#10;                                focus:ring-2 focus:ring-blue-200 transition-all duration-200 bg-white/90&quot;&#10;                                required&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1 ml-1&quot;&gt;Password&lt;/label&gt;&#10;                            &lt;input&#10;                                type=&quot;password&quot;&#10;                                placeholder=&quot;Password&quot;&#10;                                name=&quot;password&quot;&#10;                                value={payload.password}&#10;                                onChange={updatePayload}&#10;                                className=&quot;w-full px-4 py-3 rounded-xl border border-gray-300 focus:border-blue-500&#10;                                focus:ring-2 focus:ring-blue-200 transition-all duration-200 bg-white/90&quot;&#10;                                required&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button&#10;                            type=&quot;submit&quot;&#10;                            className=&quot;bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700&#10;                            px-6 py-3 text-white rounded-xl flex items-center gap-2 font-semibold shadow-lg transition-all&#10;                            duration-300 w-full justify-center mt-4 hover:shadow-xl transform hover:scale-[1.02]&quot;&#10;                        &gt;&#10;                            {editPassword ? &lt;FaSave/&gt; : &lt;FaPlus/&gt;} {editPassword ? &quot;Update Password&quot; : &quot;Add Password&quot;}&#10;                        &lt;/button&gt;&#10;                        {msgConfig.show &amp;&amp; (&#10;                            &lt;div&#10;                                className={`mt-4 p-3 rounded-xl ${msgConfig.type === 'error' ? 'bg-red-500 text-white' : 'bg-green-500 text-white'} &#10;                                animate-fadeIn shadow-md`}&gt;&#10;                                {msgConfig.msg}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import {FaPlus, FaTimes, FaSave, FaKey} from &quot;react-icons/fa&quot;;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;&#10;export default function AddPasswordPage({addNewPassword, onCloseModal, editPassword}) {&#10;    const [payload, setPayload] = useState({&#10;        title: &quot;&quot;,&#10;        username: &quot;&quot;,&#10;        password: &quot;&quot;,&#10;        url: &quot;&quot;,&#10;    });&#10;    const [msgConfig, setMsgConfig] = useState({&#10;        msg: '',&#10;        show: false,&#10;        type: 'error',&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        if (editPassword) {&#10;            setPayload({&#10;                title: editPassword.title || &quot;&quot;,&#10;                username: editPassword.username || &quot;&quot;,&#10;                password: editPassword.password || &quot;&quot;,&#10;                url: editPassword.url || &quot;&quot;,&#10;                id: editPassword.id,&#10;            });&#10;        } else {&#10;            setPayload({&#10;                title: &quot;&quot;,&#10;                username: &quot;&quot;,&#10;                password: &quot;&quot;,&#10;                url: &quot;&quot;,&#10;            });&#10;        }&#10;    }, [editPassword]);&#10;&#10;    const closeModal = () =&gt; onCloseModal();&#10;&#10;    const showError = (message) =&gt; {&#10;        setMsgConfig({&#10;            msg: message,&#10;            show: true,&#10;            type: 'error',&#10;        })&#10;    }&#10;&#10;    const handleAddPassword = (e) =&gt; {&#10;        e.preventDefault();&#10;        if (!payload || !payload.title.trim() || !payload.username.trim() || !payload.password.trim()) {&#10;            return showError('Please fill in all fields');&#10;        }&#10;        addNewPassword(&#10;            {&#10;                id: payload.id || Date.now(),&#10;                url: payload.url || &quot;&quot;,&#10;                title: payload.title,&#10;                username: payload.username,&#10;                password: payload.password,&#10;            },&#10;            !!editPassword&#10;        );&#10;        closeModal();&#10;    };&#10;&#10;    const updatePayload = (e) =&gt; {&#10;        setPayload((prev) =&gt; ({&#10;            ...prev,&#10;            [e.target.name]: e.target.value,&#10;        }));&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;fixed inset-0 z-40 flex items-center justify-center bg-gray-900/40 backdrop-blur-sm animate-fadeIn&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-2xl shadow-xl p-6 w-full max-w-md mx-4 relative animate-scaleIn&quot;&gt;&#10;                &lt;button&#10;                    onClick={closeModal}&#10;                    className=&quot;absolute top-4 right-4 text-gray-400 hover:text-gray-600 p-1.5 rounded-full hover:bg-gray-100 transition-colors&quot;&#10;                    aria-label=&quot;Close&quot;&#10;                &gt;&#10;                    &lt;FaTimes/&gt;&#10;                &lt;/button&gt;&#10;                &#10;                &lt;div className=&quot;flex items-center gap-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;bg-indigo-100 p-2.5 rounded-lg text-indigo-600&quot;&gt;&#10;                        &lt;FaKey className=&quot;text-xl&quot;/&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold text-gray-800&quot;&gt;&#10;                        {editPassword ? &quot;Edit Password&quot; : &quot;Add New Password&quot;}&#10;                    &lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;form className=&quot;space-y-4&quot; onSubmit={handleAddPassword}&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1 ml-1&quot;&gt;Title&lt;/label&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;e.g. Gmail, Twitter, Bank&quot;&#10;                            name=&quot;title&quot;&#10;                            value={payload.title}&#10;                            onChange={updatePayload}&#10;                            className=&quot;w-full px-4 py-3 rounded-xl border border-gray-200 focus:border-indigo-500 &#10;                            focus:ring-2 focus:ring-indigo-200 transition-all duration-200&quot;&#10;                            required&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1 ml-1&quot;&gt;Username&lt;/label&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;your.email@example.com&quot;&#10;                            name=&quot;username&quot;&#10;                            value={payload.username}&#10;                            onChange={updatePayload}&#10;                            className=&quot;w-full px-4 py-3 rounded-xl border border-gray-200 focus:border-indigo-500 &#10;                            focus:ring-2 focus:ring-indigo-200 transition-all duration-200&quot;&#10;                            required&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1 ml-1&quot;&gt;Password&lt;/label&gt;&#10;                        &lt;input&#10;                            type=&quot;password&quot;&#10;                            placeholder=&quot;Enter password&quot;&#10;                            name=&quot;password&quot;&#10;                            value={payload.password}&#10;                            onChange={updatePayload}&#10;                            className=&quot;w-full px-4 py-3 rounded-xl border border-gray-200 focus:border-indigo-500 &#10;                            focus:ring-2 focus:ring-indigo-200 transition-all duration-200&quot;&#10;                            required&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;button&#10;                        type=&quot;submit&quot;&#10;                        className=&quot;w-full mt-4 bg-indigo-600 hover:bg-indigo-700 text-white py-3 px-4 rounded-xl &#10;                        flex items-center justify-center gap-2 transition-all duration-300 shadow-md hover:shadow-lg&quot;&#10;                    &gt;&#10;                        {editPassword ? &lt;FaSave/&gt; : &lt;FaPlus/&gt;} &#10;                        {editPassword ? &quot;Update Password&quot; : &quot;Add Password&quot;}&#10;                    &lt;/button&gt;&#10;                    &#10;                    {msgConfig.show &amp;&amp; (&#10;                        &lt;div&#10;                            className={`p-3 rounded-xl ${msgConfig.type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' : &#10;                            'bg-green-100 text-green-800 border border-green-200'} animate-fadeIn`}&gt;&#10;                            {msgConfig.msg}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/NavBar.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/NavBar.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { FaHome, FaLock, FaDownload } from &quot;react-icons/fa&quot;;&#10;&#10;export default function NavBar({ onSearch }) {&#10;  const pathname = usePathname();&#10;  const [deferredPrompt, setDeferredPrompt] = useState(null);&#10;  const [showInstall, setShowInstall] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    // Hide install button if already running as standalone&#10;    const isStandalone =&#10;      typeof window !== &quot;undefined&quot; &amp;&amp;&#10;      (window.matchMedia(&quot;(display-mode: standalone)&quot;).matches ||&#10;        window.navigator.standalone === true);&#10;&#10;    if (isStandalone) {&#10;      setShowInstall(false);&#10;      return;&#10;    }&#10;&#10;    const handler = (e) =&gt; {&#10;      e.preventDefault();&#10;      setDeferredPrompt(e);&#10;      setShowInstall(true);&#10;    };&#10;    window.addEventListener(&quot;beforeinstallprompt&quot;, handler);&#10;&#10;    // If the event never fires, hide the button&#10;    return () =&gt; window.removeEventListener(&quot;beforeinstallprompt&quot;, handler);&#10;  }, []);&#10;&#10;  const handleInstall = async () =&gt; {&#10;    if (deferredPrompt) {&#10;      deferredPrompt.prompt();&#10;      const { outcome } = await deferredPrompt.userChoice;&#10;      if (outcome === &quot;accepted&quot;) {&#10;        setShowInstall(false);&#10;      }&#10;      setDeferredPrompt(null);&#10;    }&#10;  };&#10;&#10;  const linkClass = (path) =&gt;&#10;    `flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-300 font-medium&#10;        ${&#10;          pathname === path&#10;            ? &quot;bg-gradient-to-r from-blue-500 to-indigo-600 text-white shadow-lg transform scale-105&quot;&#10;            : &quot;bg-white/30 backdrop-blur-sm text-gray-800 hover:bg-white/50 hover:text-blue-700 hover:scale-105&quot;&#10;        }`;&#10;&#10;  return (&#10;    &lt;nav className=&quot;backdrop-blur-md bg-white/20 border-b border-white/30 p-3 fixed top-0 left-0 right-0 z-20 shadow-lg&quot;&gt;&#10;      &lt;div className=&quot;flex gap-3 md:gap-4 mx-auto max-w-5xl justify-center&quot;&gt;&#10;        &lt;Link href=&quot;/&quot; className={linkClass(&quot;/&quot;)}&gt;&#10;          &lt;FaHome className=&quot;text-lg&quot; /&gt;{&quot; &quot;}&#10;          &lt;span className=&quot;hidden sm:inline&quot;&gt;Home&lt;/span&gt;&#10;        &lt;/Link&gt;&#10;        &lt;Link href=&quot;/unlock&quot; className={linkClass(&quot;/unlock&quot;)}&gt;&#10;          &lt;FaLock className=&quot;text-lg&quot; /&gt;{&quot; &quot;}&#10;          &lt;span className=&quot;hidden sm:inline&quot;&gt;Unlock&lt;/span&gt;&#10;        &lt;/Link&gt;&#10;        {showInstall &amp;&amp; (&#10;          &lt;button&#10;            onClick={handleInstall}&#10;            className=&quot;flex items-center gap-2 px-4 py-2.5 rounded-xl bg-gradient-to-r from-green-500 to-emerald-600&#10;                        text-white font-medium shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105&quot;&#10;          &gt;&#10;            &lt;FaDownload className=&quot;text-lg&quot; /&gt;{&quot; &quot;}&#10;            &lt;span className=&quot;hidden sm:inline&quot;&gt;Download App&lt;/span&gt;&#10;          &lt;/button&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { FaHome, FaLock, FaDownload, FaKey } from &quot;react-icons/fa&quot;;&#10;&#10;export default function NavBar({ onSearch }) {&#10;  const pathname = usePathname();&#10;  const [deferredPrompt, setDeferredPrompt] = useState(null);&#10;  const [showInstall, setShowInstall] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    // Hide install button if already running as standalone&#10;    const isStandalone =&#10;      typeof window !== &quot;undefined&quot; &amp;&amp;&#10;      (window.matchMedia(&quot;(display-mode: standalone)&quot;).matches ||&#10;        window.navigator.standalone === true);&#10;&#10;    if (isStandalone) {&#10;      setShowInstall(false);&#10;      return;&#10;    }&#10;&#10;    const handler = (e) =&gt; {&#10;      e.preventDefault();&#10;      setDeferredPrompt(e);&#10;      setShowInstall(true);&#10;    };&#10;    window.addEventListener(&quot;beforeinstallprompt&quot;, handler);&#10;&#10;    // If the event never fires, hide the button&#10;    return () =&gt; window.removeEventListener(&quot;beforeinstallprompt&quot;, handler);&#10;  }, []);&#10;&#10;  const handleInstall = async () =&gt; {&#10;    if (deferredPrompt) {&#10;      deferredPrompt.prompt();&#10;      const { outcome } = await deferredPrompt.userChoice;&#10;      if (outcome === &quot;accepted&quot;) {&#10;        setShowInstall(false);&#10;      }&#10;      setDeferredPrompt(null);&#10;    }&#10;  };&#10;&#10;  const linkClass = (path) =&gt;&#10;    `flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-200 font-medium ${&#10;      pathname === path&#10;        ? &quot;bg-indigo-600 text-white shadow-md&quot;&#10;        : &quot;text-gray-700 hover:bg-gray-100&quot;&#10;    }`;&#10;&#10;  return (&#10;    &lt;nav className=&quot;fixed top-0 left-0 right-0 z-20 bg-white shadow-sm border-b border-gray-100&quot;&gt;&#10;      &lt;div className=&quot;max-w-screen-lg mx-auto px-4&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between h-16&quot;&gt;&#10;          &lt;div className=&quot;flex items-center gap-2 text-indigo-600 font-semibold text-lg&quot;&gt;&#10;            &lt;FaKey className=&quot;text-xl&quot; /&gt;&#10;            &lt;span&gt;SecurePass&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Link href=&quot;/&quot; className={linkClass(&quot;/&quot;)}&gt;&#10;              &lt;FaHome className=&quot;text-lg&quot; /&gt;{&quot; &quot;}&#10;              &lt;span className=&quot;hidden sm:inline&quot;&gt;Home&lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;Link href=&quot;/unlock&quot; className={linkClass(&quot;/unlock&quot;)}&gt;&#10;              &lt;FaLock className=&quot;text-lg&quot; /&gt;{&quot; &quot;}&#10;              &lt;span className=&quot;hidden sm:inline&quot;&gt;Unlock&lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            {showInstall &amp;&amp; (&#10;              &lt;button&#10;                onClick={handleInstall}&#10;                className=&quot;flex items-center gap-2 px-4 py-2.5 rounded-xl bg-green-600 text-white &#10;                                font-medium shadow-sm hover:shadow-md transition-all duration-200 hover:bg-green-700&quot;&#10;              &gt;&#10;                &lt;FaDownload /&gt;{&quot; &quot;}&#10;                &lt;span className=&quot;hidden sm:inline&quot;&gt;Install App&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/PinModal.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/PinModal.js" />
              <option name="originalContent" value="import { useState, useEffect } from &quot;react&quot;;&#10;import { FaTimes, FaLock, FaShieldAlt, FaCheck } from &quot;react-icons/fa&quot;;&#10;import AuthService from &quot;../services/AuthService&quot;;&#10;&#10;export default function PinModal({ onSuccess, onCancel, isSetup = false }) {&#10;  const [pin, setPin] = useState(&quot;&quot;);&#10;  const [confirmPin, setConfirmPin] = useState(&quot;&quot;);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [showConfirm, setShowConfirm] = useState(false);&#10;&#10;  const handlePinChange = (e) =&gt; {&#10;    const value = e.target.value;&#10;    // Only allow numbers&#10;    if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 6) {&#10;      setPin(value);&#10;      setError(&quot;&quot;);&#10;    }&#10;  };&#10;&#10;  const handleConfirmPinChange = (e) =&gt; {&#10;    const value = e.target.value;&#10;    if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 6) {&#10;      setConfirmPin(value);&#10;      setError(&quot;&quot;);&#10;    }&#10;  };&#10;&#10;  const handleSubmit = (e) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (isSetup) {&#10;      if (!showConfirm) {&#10;        if (pin.length &lt; 4) {&#10;          setError(&quot;PIN must be at least 4 digits&quot;);&#10;          return;&#10;        }&#10;        setShowConfirm(true);&#10;        return;&#10;      } else {&#10;        if (pin !== confirmPin) {&#10;          setError(&quot;PINs don't match&quot;);&#10;          return;&#10;        }&#10;&#10;        AuthService.savePin(pin);&#10;        onSuccess();&#10;      }&#10;    } else {&#10;      // Verification mode&#10;      if (AuthService.verifyPin(pin)) {&#10;        onSuccess();&#10;      } else {&#10;        setError(&quot;Incorrect PIN&quot;);&#10;      }&#10;    }&#10;  };&#10;&#10;  // Focus the input when modal opens&#10;  useEffect(() =&gt; {&#10;    // Small delay to ensure DOM is ready&#10;    const timer = setTimeout(() =&gt; {&#10;      const input = document.querySelector('input[inputmode=&quot;numeric&quot;]');&#10;      if (input) {&#10;        input.focus();&#10;      }&#10;    }, 100);&#10;&#10;    return () =&gt; clearTimeout(timer);&#10;  }, [showConfirm]);&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm animate-fadeIn&quot;&gt;&#10;      &lt;div className=&quot;bg-white rounded-2xl shadow-2xl p-8 w-full max-w-sm relative border border-gray-100 transform animate-scaleIn&quot;&gt;&#10;        &lt;button&#10;          onClick={onCancel}&#10;          className=&quot;absolute top-4 right-4 text-gray-400 hover:text-gray-700 transition-colors duration-200&quot;&#10;          aria-label=&quot;Close&quot;&#10;        &gt;&#10;          &lt;FaTimes className=&quot;text-xl&quot; /&gt;&#10;        &lt;/button&gt;&#10;&#10;        &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;          &lt;div className=&quot;inline-flex items-center justify-center w-20 h-20 bg-blue-100 rounded-full mb-4&quot;&gt;&#10;            {isSetup ? (&#10;              &lt;FaShieldAlt className=&quot;text-4xl text-blue-600&quot; /&gt;&#10;            ) : (&#10;              &lt;FaLock className=&quot;text-4xl text-blue-600&quot; /&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent&quot;&gt;&#10;            {isSetup&#10;              ? showConfirm&#10;                ? &quot;Confirm your PIN&quot;&#10;                : &quot;Set up a PIN&quot;&#10;              : &quot;Enter your PIN&quot;}&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-500 text-sm mt-2&quot;&gt;&#10;            {isSetup&#10;              ? &quot;Create a PIN to protect your passwords&quot;&#10;              : &quot;Enter your PIN to view this password&quot;}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit} className=&quot;space-y-5&quot;&gt;&#10;          &lt;div className=&quot;flex justify-center&quot;&gt;&#10;            &lt;input&#10;              type=&quot;password&quot;&#10;              placeholder={showConfirm ? &quot;Confirm PIN&quot; : &quot;Enter PIN&quot;}&#10;              value={showConfirm ? confirmPin : pin}&#10;              onChange={showConfirm ? handleConfirmPinChange : handlePinChange}&#10;              className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 p-4 w-full&#10;              rounded-xl transition text-center text-2xl tracking-widest bg-gray-50 shadow-inner&quot;&#10;              autoFocus&#10;              inputMode=&quot;numeric&quot;&#10;              pattern=&quot;[0-9]*&quot;&#10;              maxLength={6}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {error &amp;&amp; (&#10;            &lt;div className=&quot;text-red-500 text-center font-medium animate-fadeIn bg-red-50 p-3 rounded-xl&quot;&gt;&#10;              {error}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          &lt;button&#10;            type=&quot;submit&quot;&#10;            className=&quot;bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700&#10;            px-6 py-3 text-white rounded-xl flex items-center gap-2 font-semibold shadow-lg transition-all&#10;            duration-300 w-full justify-center mt-4 hover:shadow-xl transform hover:scale-[1.02]&quot;&#10;          &gt;&#10;            {isSetup&#10;              ? showConfirm&#10;                ? &lt;&gt;&lt;FaCheck className=&quot;mr-1&quot; /&gt; Confirm PIN&lt;/&gt;&#10;                : &quot;Continue&quot;&#10;              : &lt;&gt;&lt;FaLock className=&quot;mr-1&quot; /&gt; Unlock&lt;/&gt;}&#10;          &lt;/button&gt;&#10;        &lt;/form&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useEffect } from &quot;react&quot;;&#13;&#10;import { FaTimes, FaLock, FaShieldAlt, FaCheck, FaExclamationCircle } from &quot;react-icons/fa&quot;;&#13;&#10;import AuthService from &quot;../services/AuthService&quot;;&#13;&#10;&#13;&#10;export default function PinModal({ onSuccess, onCancel, isSetup = false }) {&#13;&#10;  const [pin, setPin] = useState(&quot;&quot;);&#13;&#10;  const [confirmPin, setConfirmPin] = useState(&quot;&quot;);&#13;&#10;  const [error, setError] = useState(&quot;&quot;);&#13;&#10;  const [showConfirm, setShowConfirm] = useState(false);&#13;&#10;&#13;&#10;  const handlePinChange = (e) =&gt; {&#13;&#10;    const value = e.target.value;&#13;&#10;    // Only allow numbers&#13;&#10;    if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 6) {&#13;&#10;      setPin(value);&#13;&#10;      setError(&quot;&quot;);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleConfirmPinChange = (e) =&gt; {&#13;&#10;    const value = e.target.value;&#13;&#10;    if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 6) {&#13;&#10;      setConfirmPin(value);&#13;&#10;      setError(&quot;&quot;);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleSubmit = (e) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;&#13;&#10;    if (isSetup) {&#13;&#10;      if (!showConfirm) {&#13;&#10;        if (pin.length &lt; 4) {&#13;&#10;          setError(&quot;PIN must be at least 4 digits&quot;);&#13;&#10;          return;&#13;&#10;        }&#13;&#10;        setShowConfirm(true);&#13;&#10;        return;&#13;&#10;      } else {&#13;&#10;        if (pin !== confirmPin) {&#13;&#10;          setError(&quot;PINs don't match&quot;);&#13;&#10;          return;&#13;&#10;        }&#13;&#10;&#13;&#10;        AuthService.savePin(pin);&#13;&#10;        onSuccess();&#13;&#10;      }&#13;&#10;    } else {&#13;&#10;      // Verification mode&#13;&#10;      if (AuthService.verifyPin(pin)) {&#13;&#10;        onSuccess();&#13;&#10;      } else {&#13;&#10;        setError(&quot;Incorrect PIN&quot;);&#13;&#10;      }&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  // Focus the input when modal opens&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    // Small delay to ensure DOM is ready&#13;&#10;    const timer = setTimeout(() =&gt; {&#13;&#10;      const input = document.querySelector('input[inputmode=&quot;numeric&quot;]');&#13;&#10;      if (input) {&#13;&#10;        input.focus();&#13;&#10;      }&#13;&#10;    }, 100);&#13;&#10;&#13;&#10;    return () =&gt; clearTimeout(timer);&#13;&#10;  }, [showConfirm]);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-gray-900/40 backdrop-blur-sm animate-fadeIn&quot;&gt;&#13;&#10;      &lt;div className=&quot;bg-white rounded-2xl shadow-xl p-6 w-full max-w-sm mx-4 relative animate-scaleIn&quot;&gt;&#13;&#10;        &lt;button&#13;&#10;          onClick={onCancel}&#13;&#10;          className=&quot;absolute top-4 right-4 text-gray-400 hover:text-gray-600 p-1.5 rounded-full hover:bg-gray-100 transition-colors&quot;&#13;&#10;          aria-label=&quot;Close&quot;&#13;&#10;        &gt;&#13;&#10;          &lt;FaTimes/&gt;&#13;&#10;        &lt;/button&gt;&#13;&#10;&#13;&#10;        &lt;div className=&quot;text-center my-6&quot;&gt;&#13;&#10;          &lt;div className=&quot;w-16 h-16 rounded-full bg-indigo-100 text-indigo-600 flex items-center justify-center mx-auto mb-4&quot;&gt;&#13;&#10;            {isSetup ? &lt;FaShieldAlt className=&quot;text-2xl&quot;/&gt; : &lt;FaLock className=&quot;text-2xl&quot;/&gt;}&#13;&#10;          &lt;/div&gt;&#13;&#10;          &#13;&#10;          &lt;h2 className=&quot;text-xl font-semibold text-gray-800 mb-1&quot;&gt;&#13;&#10;            {isSetup&#13;&#10;                ? showConfirm&#13;&#10;                  ? &quot;Confirm your PIN&quot;&#13;&#10;                  : &quot;Create a PIN&quot;&#13;&#10;                : &quot;Enter your PIN&quot;}&#13;&#10;          &lt;/h2&gt;&#13;&#10;          &#13;&#10;          &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;&#13;&#10;            {isSetup&#13;&#10;                ? &quot;Secure your passwords with a PIN code&quot;&#13;&#10;                : &quot;Enter your PIN to continue&quot;}&#13;&#10;          &lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex justify-center&quot;&gt;&#13;&#10;            &lt;input&#13;&#10;              type=&quot;password&quot;&#13;&#10;              placeholder={showConfirm ? &quot;Confirm PIN&quot; : &quot;Enter PIN&quot;}&#13;&#10;              value={showConfirm ? confirmPin : pin}&#13;&#10;              onChange={showConfirm ? handleConfirmPinChange : handlePinChange}&#13;&#10;              className=&quot;text-center text-2xl tracking-widest w-full px-4 py-3.5 rounded-xl border border-gray-200 &#13;&#10;              focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 transition-all duration-200 bg-gray-50&quot;&#13;&#10;              autoFocus&#13;&#10;              inputMode=&quot;numeric&quot;&#13;&#10;              pattern=&quot;[0-9]*&quot;&#13;&#10;              maxLength={6}&#13;&#10;            /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {error &amp;&amp; (&#13;&#10;            &lt;div className=&quot;flex items-center gap-2 text-red-600 bg-red-50 p-3 rounded-xl border border-red-100 animate-fadeIn&quot;&gt;&#13;&#10;              &lt;FaExclamationCircle className=&quot;flex-shrink-0&quot;/&gt;&#13;&#10;              &lt;span className=&quot;text-sm&quot;&gt;{error}&lt;/span&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;&#13;&#10;          &lt;button&#13;&#10;            type=&quot;submit&quot;&#13;&#10;            className=&quot;w-full bg-indigo-600 hover:bg-indigo-700 text-white py-3 px-4 rounded-xl &#13;&#10;            flex items-center justify-center gap-2 transition-all duration-300 shadow-md hover:shadow-lg&quot;&#13;&#10;          &gt;&#13;&#10;            {isSetup&#13;&#10;                ? showConfirm&#13;&#10;                  ? &lt;&gt;&lt;FaCheck className=&quot;mr-1&quot;/&gt; Confirm PIN&lt;/&gt;&#13;&#10;                  : &quot;Continue&quot;&#13;&#10;                : &lt;&gt;&lt;FaLock className=&quot;mr-1&quot;/&gt; Unlock&lt;/&gt;}&#13;&#10;          &lt;/button&gt;&#13;&#10;          &#13;&#10;          {!isSetup &amp;&amp; (&#13;&#10;            &lt;button&#13;&#10;              type=&quot;button&quot;&#13;&#10;              onClick={onCancel}&#13;&#10;              className=&quot;w-full py-2.5 px-4 bg-gray-100 hover:bg-gray-200 text-gray-800 rounded-xl &#13;&#10;              transition-colors duration-200 mt-2&quot;&#13;&#10;            &gt;&#13;&#10;              Cancel&#13;&#10;            &lt;/button&gt;&#13;&#10;          )}&#13;&#10;        &lt;/form&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ShowPasswordModal.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ShowPasswordModal.js" />
              <option name="originalContent" value="import {FaClipboard, FaTimes, FaCheck} from &quot;react-icons/fa&quot;;&#10;import {useState} from &quot;react&quot;;&#10;&#10;export default function ShowPasswordModal({viewPassword, closeViewModal}) {&#10;    const [copied, setCopied] = useState(false);&#10;&#10;    async function handleCopyPassword(password) {&#10;        if (password) {&#10;            try {&#10;                await navigator.clipboard.writeText(password);&#10;                setCopied(true);&#10;                setTimeout(() =&gt; setCopied(false), 2000);&#10;            } catch {&#10;                setCopied(false);&#10;            }&#10;        }&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm animate-fadeIn&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-2xl shadow-2xl p-8 w-full max-w-sm relative border border-gray-100 transform animate-scaleIn&quot;&gt;&#10;                &lt;button&#10;                    onClick={() =&gt; closeViewModal() &amp;&amp; setCopied(false)}&#10;                    className=&quot;absolute top-4 right-4 text-gray-400 hover:text-gray-700 transition-colors duration-200&quot;&#10;                    aria-label=&quot;Close&quot;&#10;                &gt;&#10;                    &lt;FaTimes className=&quot;text-xl&quot;/&gt;&#10;                &lt;/button&gt;&#10;                &lt;h2 className=&quot;text-2xl font-bold mb-6 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent&quot;&gt;&#10;                    Password Details&#10;                &lt;/h2&gt;&#10;                &lt;div className=&quot;space-y-5&quot;&gt;&#10;                    &lt;div className=&quot;bg-gray-50 p-4 rounded-xl border border-gray-100&quot;&gt;&#10;                        &lt;span className=&quot;font-semibold text-gray-700 block mb-1&quot;&gt;Title&lt;/span&gt;&#10;                        &lt;span className=&quot;text-gray-800&quot;&gt;{viewPassword.title}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;bg-gray-50 p-4 rounded-xl border border-gray-100&quot;&gt;&#10;                        &lt;span className=&quot;font-semibold text-gray-700 block mb-1&quot;&gt;Username&lt;/span&gt;&#10;                        &lt;span className=&quot;text-gray-800&quot;&gt;{viewPassword.username}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;bg-gray-50 p-4 rounded-xl border border-gray-100&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;                            &lt;span className=&quot;font-semibold text-gray-700&quot;&gt;Password&lt;/span&gt;&#10;                            &lt;button&#10;                                className={`p-2 rounded-lg ${copied ? 'bg-green-100 text-green-700' : 'bg-blue-100 text-blue-700'} &#10;                                transition-all duration-300 hover:shadow-md transform hover:scale-105`}&#10;                                aria-label=&quot;Copy password&quot;&#10;                                onClick={() =&gt; handleCopyPassword(viewPassword.password)}&#10;                            &gt;&#10;                                {copied ? &lt;FaCheck className=&quot;text-green-600&quot;/&gt; : &lt;FaClipboard/&gt;}&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                            &lt;span className=&quot;font-mono tracking-wider text-gray-800 bg-gray-100 p-2 rounded-lg w-full break-all&quot;&gt;&#10;                                {viewPassword.password}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        {copied &amp;&amp; (&#10;                            &lt;span className=&quot;text-green-600 font-medium text-sm mt-2 block animate-fadeIn&quot;&gt;&#10;                                Copied to clipboard!&#10;                            &lt;/span&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="import {FaClipboard, FaTimes, FaCheck, FaKey, FaUser, FaLock} from &quot;react-icons/fa&quot;;&#13;&#10;import {useState} from &quot;react&quot;;&#13;&#10;&#13;&#10;export default function ShowPasswordModal({viewPassword, closeViewModal}) {&#13;&#10;    const [copied, setCopied] = useState(false);&#13;&#10;&#13;&#10;    async function handleCopyPassword(password) {&#13;&#10;        if (password) {&#13;&#10;            try {&#13;&#10;                await navigator.clipboard.writeText(password);&#13;&#10;                setCopied(true);&#13;&#10;                setTimeout(() =&gt; setCopied(false), 2000);&#13;&#10;            } catch {&#13;&#10;                setCopied(false);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    return (&#13;&#10;        &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-gray-900/40 backdrop-blur-sm animate-fadeIn&quot;&gt;&#13;&#10;            &lt;div className=&quot;bg-white rounded-2xl shadow-xl p-6 w-full max-w-md mx-4 relative animate-scaleIn&quot;&gt;&#13;&#10;                &lt;button&#13;&#10;                    onClick={() =&gt; closeViewModal() &amp;&amp; setCopied(false)}&#13;&#10;                    className=&quot;absolute top-4 right-4 text-gray-400 hover:text-gray-600 p-1.5 rounded-full hover:bg-gray-100 transition-colors&quot;&#13;&#10;                    aria-label=&quot;Close&quot;&#13;&#10;                &gt;&#13;&#10;                    &lt;FaTimes/&gt;&#13;&#10;                &lt;/button&gt;&#13;&#10;                &#13;&#10;                &lt;div className=&quot;flex items-center gap-3 mb-6&quot;&gt;&#13;&#10;                    &lt;div className=&quot;bg-indigo-100 p-2.5 rounded-lg text-indigo-600&quot;&gt;&#13;&#10;                        &lt;FaKey className=&quot;text-xl&quot;/&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;h2 className=&quot;text-xl font-semibold text-gray-800&quot;&gt;&#13;&#10;                        {viewPassword.title}&#13;&#10;                    &lt;/h2&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &#13;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center gap-3 p-4 bg-gray-50 rounded-xl&quot;&gt;&#13;&#10;                        &lt;div className=&quot;text-indigo-500&quot;&gt;&#13;&#10;                            &lt;FaUser/&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div&gt;&#13;&#10;                            &lt;div className=&quot;text-sm text-gray-500 mb-0.5&quot;&gt;Username&lt;/div&gt;&#13;&#10;                            &lt;div className=&quot;text-gray-800 font-medium&quot;&gt;{viewPassword.username}&lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &#13;&#10;                    &lt;div className=&quot;p-4 bg-gray-50 rounded-xl&quot;&gt;&#13;&#10;                        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#13;&#10;                            &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#13;&#10;                                &lt;div className=&quot;text-indigo-500&quot;&gt;&#13;&#10;                                    &lt;FaLock/&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                                &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Password&lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                            &lt;button&#13;&#10;                                className={`p-2 rounded-lg transition-all duration-200 ${&#13;&#10;                                    copied &#13;&#10;                                        ? 'bg-green-100 text-green-700' &#13;&#10;                                        : 'bg-gray-100 text-gray-700 hover:bg-indigo-100 hover:text-indigo-700'&#13;&#10;                                }`}&#13;&#10;                                onClick={() =&gt; handleCopyPassword(viewPassword.password)}&#13;&#10;                                aria-label=&quot;Copy password&quot;&#13;&#10;                            &gt;&#13;&#10;                                {copied ? &lt;FaCheck/&gt; : &lt;FaClipboard/&gt;}&#13;&#10;                            &lt;/button&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &#13;&#10;                        &lt;div className=&quot;mt-1 font-mono tracking-wider text-gray-800 bg-white p-3 rounded-lg border border-gray-200 break-all&quot;&gt;&#13;&#10;                            {viewPassword.password}&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &#13;&#10;                        {copied &amp;&amp; (&#13;&#10;                            &lt;div className=&quot;mt-2 text-green-600 text-sm font-medium flex items-center gap-1.5 animate-fadeIn&quot;&gt;&#13;&#10;                                &lt;FaCheck size={12}/&gt; Copied to clipboard&#13;&#10;                            &lt;/div&gt;&#13;&#10;                        )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &#13;&#10;                    &lt;button&#13;&#10;                        onClick={() =&gt; closeViewModal() &amp;&amp; setCopied(false)}&#13;&#10;                        className=&quot;w-full py-2.5 px-4 bg-gray-100 hover:bg-gray-200 text-gray-800 rounded-xl &#13;&#10;                        transition-colors duration-200 mt-2&quot;&#13;&#10;                    &gt;&#13;&#10;                        Close&#13;&#10;                    &lt;/button&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>