<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/add/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/add/page.js" />
              <option name="originalContent" value="import NavBar from &quot;../../components/NavBar&quot;;&#10;&#10;export default function AddPasswordPage() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;p-4&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold mb-4&quot;&gt;Add New Password&lt;/h2&gt;&#10;                &lt;form className=&quot;space-y-3 max-w-md&quot;&gt;&#10;                    &lt;input type=&quot;text&quot; placeholder=&quot;Title&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; className=&quot;border p-2 w-full rounded&quot; /&gt;&#10;                    &lt;button className=&quot;bg-blue-600 px-4 py-2 text-white rounded&quot;&gt;Save&lt;/button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import NavBar from &quot;../../components/NavBar&quot;;&#10;import { FaSave } from &quot;react-icons/fa&quot;;&#10;&#10;export default function AddPasswordPage() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;flex justify-center&quot;&gt;&#10;                &lt;div className=&quot;bg-white/90 rounded-2xl shadow-xl p-8 w-full max-w-md mt-6&quot;&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold mb-6 text-blue-700&quot;&gt;Add New Password&lt;/h2&gt;&#10;                    &lt;form className=&quot;space-y-5&quot;&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Title&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Username&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;input&#10;                            type=&quot;password&quot;&#10;                            placeholder=&quot;Password&quot;&#10;                            className=&quot;border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 p-3 w-full rounded-lg transition&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 px-6 py-3 text-white rounded-lg flex items-center gap-2 font-semibold shadow transition&quot;&#10;                        &gt;&#10;                            &lt;FaSave /&gt; Save&#10;                        &lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import {FaEye, FaFingerprint, FaPlus, FaSearch, FaUserCircle} from &quot;react-icons/fa&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import AddNewPasswordModal from &quot;../components/CreateUpdatePasswordModal&quot;;&#10;import ShowPasswordModal from &quot;@/components/ShowPasswordModal&quot;;&#10;import PinModal from &quot;@/components/PinModal&quot;;&#10;import AuthService from &quot;@/services/AuthService&quot;;&#10;&#10;export default function HomePage() {&#10;    const [passwords, setPasswords] = useState([]);&#10;    const [filteredPasswords, setFilteredPasswords] = useState([]);&#10;    const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;    const [showModal, setShowModal] = useState(false);&#10;    const [editPassword, setEditPassword] = useState(null);&#10;    const [viewPassword, setViewPassword] = useState(null);&#10;    const [isAuthenticating, setIsAuthenticating] = useState(false);&#10;    const [selectedPasswordForAuth, setSelectedPasswordForAuth] = useState(null);&#10;    const [biometricAvailable, setBiometricAvailable] = useState(false);&#10;    const [showPinSetup, setShowPinSetup] = useState(false);&#10;    const [logs, setLogs] = useState([]);&#10;&#10;    const addLogs = (message) =&gt; {&#10;        setLogs(prevLogs =&gt; [...prevLogs, `${message}\n`]);&#10;    }&#10;&#10;    // Load passwords from localStorage on mount&#10;    useEffect(() =&gt; {&#10;        loadPasswords();&#10;    }, []);&#10;&#10;    // Update filteredPasswords when passwords change&#10;    useEffect(() =&gt; {&#10;        setFilteredPasswords(passwords);&#10;    }, [passwords]);&#10;&#10;    // Save passwords to localStorage whenever passwords change&#10;    useEffect(() =&gt; {&#10;        if (typeof window !== &quot;undefined&quot;) {&#10;            localStorage.setItem(&quot;passwords&quot;, JSON.stringify(passwords));&#10;            // Optional: console.log for debugging&#10;            // console.log('Passwords saved to localStorage', passwords);&#10;        }&#10;    }, [passwords]);&#10;&#10;    // Check for biometric availability on mount&#10;    useEffect(() =&gt; {&#10;        const checkBiometricAvailability = async () =&gt; {&#10;            const available = await AuthService.isBiometricAvailable();&#10;            addLogs(`isBiometricAvailable: ${available}`);&#10;            setBiometricAvailable(available);&#10;&#10;            // If no PIN is set, show PIN setup on first load&#10;            if (!AuthService.hasPin()) {&#10;                setShowPinSetup(true);&#10;            }&#10;        };&#10;&#10;        checkBiometricAvailability();&#10;    }, []);&#10;&#10;    function loadPasswords() {&#10;        const stored = typeof window !== &quot;undefined&quot; ? localStorage.getItem(&quot;passwords&quot;) : null;&#10;        if (stored) {&#10;            try {&#10;                setPasswords(JSON.parse(stored));&#10;            } catch {&#10;                setPasswords([]);&#10;            }&#10;        }&#10;    }&#10;&#10;    function handleSearch(value) {&#10;        setSearchTerm(value);&#10;        if (!value.trim()) {&#10;            setFilteredPasswords(passwords);&#10;            return;&#10;        }&#10;        const filtered = passwords.filter(password =&gt;&#10;            password.title?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.username?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.url?.toLowerCase().includes(value.toLowerCase())&#10;        );&#10;        setFilteredPasswords(filtered);&#10;    }&#10;&#10;    function handleKeyDown(e) {&#10;        const value = e.target.value;&#10;        handleSearch(value);&#10;    }&#10;&#10;    function addNewPassword(newPassword, isEdit = false) {&#10;        if (isEdit &amp;&amp; newPassword.id) {&#10;            setPasswords(prev =&gt;&#10;                prev.map(p =&gt; (p.id === newPassword.id ? newPassword : p))&#10;            );&#10;        } else {&#10;            setPasswords(prev =&gt; [...prev, newPassword]);&#10;        }&#10;        setSearchTerm(&quot;&quot;);&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    function onCloseNewPasswordModal() {&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    //const [handleEditPassword, setHandleEditPassword] = useState(null);&#10;&#10;    // Add missing handleEditPassword function&#10;    function handleEditPassword(password) {&#10;        setEditPassword(password);&#10;        setShowModal(true);&#10;    }&#10;&#10;    async function handleViewPassword(password) {&#10;        setSelectedPasswordForAuth(password);&#10;&#10;        // First check if we have a PIN set up&#10;        const hasPin = AuthService.hasPin();&#10;        addLogs(`Has PIN: ${hasPin}`);&#10;        addLogs(`biometricAvailable: ${biometricAvailable}`);&#10;&#10;        // If biometrics are available, try that first&#10;        if (biometricAvailable) {&#10;            setIsAuthenticating(true);&#10;            try {&#10;                const response = await AuthService.authenticateLocal();&#10;                setLogs((prevLogs) =&gt; [...prevLogs, ...response.logs]);&#10;                if (response.success) {&#10;                    // Success with biometrics&#10;                    setViewPassword(password);&#10;                    setIsAuthenticating(false);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;Biometric authentication failed:&quot;, error);&#10;            }&#10;&#10;            // Biometric failed, fall back to PIN&#10;            setIsAuthenticating(false);&#10;        }&#10;&#10;        // If we have a PIN, show PIN verification&#10;        if (hasPin) {&#10;            setIsAuthenticating(true);&#10;        } else {&#10;            // No PIN set up, show PIN setup&#10;            setShowPinSetup(true);&#10;        }&#10;    }&#10;&#10;    function handlePinSuccess() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;        if (selectedPasswordForAuth) {&#10;            setViewPassword(selectedPasswordForAuth);&#10;            setSelectedPasswordForAuth(null);&#10;        }&#10;    }&#10;&#10;    function handlePinCancel() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;        setSelectedPasswordForAuth(null);&#10;    }&#10;&#10;    function closeViewModal() {&#10;        setViewPassword(null);&#10;    }&#10;&#10;    function onClickOutsideLoader(e) {&#10;        console.log(e, 'clicked outside loader');&#10;        e.stopPropagation();&#10;        setIsAuthenticating(false);&#10;    }&#10;&#10;    // Make sure PIN setup works first time&#10;    useEffect(() =&gt; {&#10;        // Check if we should show PIN setup on first visit&#10;        if (typeof window !== &quot;undefined&quot; &amp;&amp; !localStorage.getItem('securepass_pin_setup_shown')) {&#10;            setShowPinSetup(true);&#10;            localStorage.setItem('securepass_pin_setup_shown', 'true');&#10;        }&#10;    }, []);&#10;&#10;    return (&#10;        &lt;div&gt;&#10;            {/*&lt;div*/}&#10;            {/*    className=&quot;bg-gradient-to-r from-blue-500 to-purple-600 min-h-50 flex flex-col justify-center rounded-2xl&quot;&gt;*/}&#10;            {/*    {logs.map((l, index) =&gt; (*/}&#10;            {/*        &lt;div key={index} className=&quot;bg-gray-800/50 p-2 rounded-lg shadow-md m-2&quot;&gt;*/}&#10;            {/*            &lt;p className=&quot;text-white text-sm mb-1&quot;&gt;*/}&#10;            {/*                {l}*/}&#10;            {/*            &lt;/p&gt;*/}&#10;            {/*        &lt;/div&gt;*/}&#10;            {/*    ))}*/}&#10;            {/*&lt;/div&gt;*/}&#10;            &lt;div className=&quot;relative w-full max-w-md mx-auto mt-2 mb-5&quot;&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search passwords...&quot;&#10;                    defaultValue={searchTerm}&#10;                    onKeyUp={handleKeyDown}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 rounded-lg text-black bg-white/70 focus:bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all&quot;&#10;                /&gt;&#10;                &lt;FaSearch className=&quot;absolute left-3 top-1/2 -translate-y-1/2 text-gray-500&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Add Button */}&#10;            &lt;button&#10;                onClick={() =&gt; setShowModal(true)}&#10;                className=&quot;fixed bottom-8 right-8 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg flex items-center justify-center z-30 transition&quot;&#10;                aria-label=&quot;Add new password&quot;&#10;            &gt;&#10;                &lt;FaPlus className=&quot;text-2xl&quot;/&gt;&#10;            &lt;/button&gt;&#10;&#10;            {/* Add/Edit Modal */}&#10;            {showModal &amp;&amp; (&#10;                &lt;AddNewPasswordModal&#10;                    addNewPassword={addNewPassword}&#10;                    onCloseModal={onCloseNewPasswordModal}&#10;                    editPassword={editPassword}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Setup Modal */}&#10;            {showPinSetup &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                    isSetup={true}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Verification Modal */}&#10;            {isAuthenticating &amp;&amp; !biometricAvailable &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* Biometric Authentication Indicator */}&#10;            {isAuthenticating &amp;&amp; biometricAvailable &amp;&amp; (&#10;                &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/40&quot; onClick={onClickOutsideLoader}&gt;&#10;                    &lt;div&#10;                        className=&quot;bg-white rounded-2xl shadow-2xl p-8 text-center&quot;&#10;                    &gt;&#10;                        &lt;FaFingerprint className=&quot;text-5xl text-blue-600 mx-auto mb-4 animate-pulse&quot;/&gt;&#10;                        &lt;h2 className=&quot;text-xl font-bold text-blue-700&quot;&gt;&#10;                            Verifying Identity&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-500 mt-2&quot;&gt;&#10;                            Use your device&amp;#39;s security method&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* View Password Modal */}&#10;            {viewPassword &amp;&amp; (&#10;                &lt;ShowPasswordModal closeViewModal={closeViewModal} viewPassword={viewPassword}/&gt;&#10;            )}&#10;&#10;            &lt;h2 className=&quot;text-2xl font-bold mb-6 text-white tracking-tight&quot;&gt;Saved Passwords&lt;/h2&gt;&#10;            &lt;ul className=&quot;space-y-4&quot;&gt;&#10;                {filteredPasswords.map((item) =&gt; (&#10;                    &lt;li&#10;                        key={item.id}&#10;                        className=&quot;bg-white/80 p-4 rounded-xl shadow-md flex items-center justify-between hover:shadow-lg transition-shadow&quot;&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                            &lt;FaUserCircle className=&quot;text-gray-800 text-3xl&quot;/&gt;&#10;                            &lt;div&gt;&#10;                                &lt;p className=&quot;font-semibold text-lg text-gray-800&quot;&gt;{item.title}&lt;/p&gt;&#10;                                &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;{item.username}&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-gray-800 hover:bg-gray-900 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleViewPassword(item)}&#10;                            &gt;&#10;                                &lt;FaEye/&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;View&lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-blue-500 hover:bg-blue-600 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleEditPassword(item)}&#10;                                aria-label=&quot;Edit&quot;&#10;                            &gt;&#10;                                Edit&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/li&gt;&#10;                ))}&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import {FaEye, FaFingerprint, FaPlus, FaSearch, FaUserCircle, FaPencilAlt, FaTrash} from &quot;react-icons/fa&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import AddNewPasswordModal from &quot;../components/CreateUpdatePasswordModal&quot;;&#10;import ShowPasswordModal from &quot;@/components/ShowPasswordModal&quot;;&#10;import PinModal from &quot;@/components/PinModal&quot;;&#10;import AuthService from &quot;@/services/AuthService&quot;;&#10;&#10;export default function HomePage() {&#10;    const [passwords, setPasswords] = useState([]);&#10;    const [filteredPasswords, setFilteredPasswords] = useState([]);&#10;    const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;    const [showModal, setShowModal] = useState(false);&#10;    const [editPassword, setEditPassword] = useState(null);&#10;    const [viewPassword, setViewPassword] = useState(null);&#10;    const [isAuthenticating, setIsAuthenticating] = useState(false);&#10;    const [selectedPasswordForAuth, setSelectedPasswordForAuth] = useState(null);&#10;    const [passwordToDelete, setPasswordToDelete] = useState(null);&#10;    const [biometricAvailable, setBiometricAvailable] = useState(false);&#10;    const [showPinSetup, setShowPinSetup] = useState(false);&#10;    const [logs, setLogs] = useState([]);&#10;&#10;    const addLogs = (message) =&gt; {&#10;        setLogs(prevLogs =&gt; [...prevLogs, `${message}\n`]);&#10;    }&#10;&#10;    // Load passwords from localStorage on mount&#10;    useEffect(() =&gt; {&#10;        loadPasswords();&#10;    }, []);&#10;&#10;    // Update filteredPasswords when passwords change&#10;    useEffect(() =&gt; {&#10;        setFilteredPasswords(passwords);&#10;    }, [passwords]);&#10;&#10;    // Save passwords to localStorage whenever passwords change&#10;    useEffect(() =&gt; {&#10;        if (typeof window !== &quot;undefined&quot;) {&#10;            localStorage.setItem(&quot;passwords&quot;, JSON.stringify(passwords));&#10;            // Optional: console.log for debugging&#10;            // console.log('Passwords saved to localStorage', passwords);&#10;        }&#10;    }, [passwords]);&#10;&#10;    // Check for biometric availability on mount&#10;    useEffect(() =&gt; {&#10;        const checkBiometricAvailability = async () =&gt; {&#10;            const available = await AuthService.isBiometricAvailable();&#10;            addLogs(`isBiometricAvailable: ${available}`);&#10;            setBiometricAvailable(available);&#10;&#10;            // If no PIN is set, show PIN setup on first load&#10;            if (!AuthService.hasPin()) {&#10;                setShowPinSetup(true);&#10;            }&#10;        };&#10;&#10;        checkBiometricAvailability();&#10;    }, []);&#10;&#10;    function loadPasswords() {&#10;        const stored = typeof window !== &quot;undefined&quot; ? localStorage.getItem(&quot;passwords&quot;) : null;&#10;        if (stored) {&#10;            try {&#10;                setPasswords(JSON.parse(stored));&#10;            } catch {&#10;                setPasswords([]);&#10;            }&#10;        }&#10;    }&#10;&#10;    function handleSearch(value) {&#10;        setSearchTerm(value);&#10;        if (!value.trim()) {&#10;            setFilteredPasswords(passwords);&#10;            return;&#10;        }&#10;        const filtered = passwords.filter(password =&gt;&#10;            password.title?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.username?.toLowerCase().includes(value.toLowerCase()) ||&#10;            password.url?.toLowerCase().includes(value.toLowerCase())&#10;        );&#10;        setFilteredPasswords(filtered);&#10;    }&#10;&#10;    function handleKeyDown(e) {&#10;        const value = e.target.value;&#10;        handleSearch(value);&#10;    }&#10;&#10;    function addNewPassword(newPassword, isEdit = false) {&#10;        if (isEdit &amp;&amp; newPassword.id) {&#10;            setPasswords(prev =&gt;&#10;                prev.map(p =&gt; (p.id === newPassword.id ? newPassword : p))&#10;            );&#10;        } else {&#10;            setPasswords(prev =&gt; [...prev, newPassword]);&#10;        }&#10;        setSearchTerm(&quot;&quot;);&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    function onCloseNewPasswordModal() {&#10;        setShowModal(false);&#10;        setEditPassword(null);&#10;    }&#10;&#10;    //const [handleEditPassword, setHandleEditPassword] = useState(null);&#10;&#10;    // Add missing handleEditPassword function&#10;    function handleEditPassword(password) {&#10;        setEditPassword(password);&#10;        setShowModal(true);&#10;    }&#10;&#10;    async function handleViewPassword(password) {&#10;        setSelectedPasswordForAuth(password);&#10;&#10;        // First check if we have a PIN set up&#10;        const hasPin = AuthService.hasPin();&#10;        addLogs(`Has PIN: ${hasPin}`);&#10;        addLogs(`biometricAvailable: ${biometricAvailable}`);&#10;&#10;        // If biometrics are available, try that first&#10;        if (biometricAvailable) {&#10;            setIsAuthenticating(true);&#10;            try {&#10;                const response = await AuthService.authenticateLocal();&#10;                setLogs((prevLogs) =&gt; [...prevLogs, ...response.logs]);&#10;                if (response.success) {&#10;                    // Success with biometrics&#10;                    setViewPassword(password);&#10;                    setIsAuthenticating(false);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;Biometric authentication failed:&quot;, error);&#10;            }&#10;&#10;            // Biometric failed, fall back to PIN&#10;            setIsAuthenticating(false);&#10;        }&#10;&#10;        // If we have a PIN, show PIN verification&#10;        if (hasPin) {&#10;            setIsAuthenticating(true);&#10;        } else {&#10;            // No PIN set up, show PIN setup&#10;            setShowPinSetup(true);&#10;        }&#10;    }&#10;&#10;    async function handleDeletePassword(password) {&#10;        setPasswordToDelete(password);&#10;        &#10;        // First check if we have a PIN set up&#10;        const hasPin = AuthService.hasPin();&#10;        &#10;        // If biometrics are available, try that first&#10;        if (biometricAvailable) {&#10;            setIsAuthenticating(true);&#10;            try {&#10;                const response = await AuthService.authenticateLocal();&#10;                setLogs((prevLogs) =&gt; [...prevLogs, ...response.logs]);&#10;                if (response.success) {&#10;                    // Success with biometrics&#10;                    confirmDelete(password);&#10;                    setIsAuthenticating(false);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;Biometric authentication failed:&quot;, error);&#10;            }&#10;&#10;            // Biometric failed, fall back to PIN&#10;            setIsAuthenticating(false);&#10;        }&#10;&#10;        // If we have a PIN, show PIN verification&#10;        if (hasPin) {&#10;            setIsAuthenticating(true);&#10;        } else {&#10;            // No PIN set up, show PIN setup&#10;            setShowPinSetup(true);&#10;        }&#10;    }&#10;&#10;    function confirmDelete(password) {&#10;        const updatedPasswords = passwords.filter(p =&gt; p.id !== password.id);&#10;        setPasswords(updatedPasswords);&#10;        setPasswordToDelete(null);&#10;    }&#10;&#10;    function handlePinSuccess() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;        if (selectedPasswordForAuth) {&#10;            setViewPassword(selectedPasswordForAuth);&#10;            setSelectedPasswordForAuth(null);&#10;        }&#10;        if (passwordToDelete) {&#10;            confirmDelete(passwordToDelete);&#10;        }&#10;    }&#10;&#10;    function handlePinCancel() {&#10;        setIsAuthenticating(false);&#10;        setShowPinSetup(false);&#10;        setSelectedPasswordForAuth(null);&#10;    }&#10;&#10;    function closeViewModal() {&#10;        setViewPassword(null);&#10;    }&#10;&#10;    function onClickOutsideLoader(e) {&#10;        console.log(e, 'clicked outside loader');&#10;        e.stopPropagation();&#10;        setIsAuthenticating(false);&#10;    }&#10;&#10;    // Make sure PIN setup works first time&#10;    useEffect(() =&gt; {&#10;        // Check if we should show PIN setup on first visit&#10;        if (typeof window !== &quot;undefined&quot; &amp;&amp; !localStorage.getItem('securepass_pin_setup_shown')) {&#10;            setShowPinSetup(true);&#10;            localStorage.setItem('securepass_pin_setup_shown', 'true');&#10;        }&#10;    }, []);&#10;&#10;    return (&#10;        &lt;div&gt;&#10;            {/*&lt;div*/}&#10;            {/*    className=&quot;bg-gradient-to-r from-blue-500 to-purple-600 min-h-50 flex flex-col justify-center rounded-2xl&quot;&gt;*/}&#10;            {/*    {logs.map((l, index) =&gt; (*/}&#10;            {/*        &lt;div key={index} className=&quot;bg-gray-800/50 p-2 rounded-lg shadow-md m-2&quot;&gt;*/}&#10;            {/*            &lt;p className=&quot;text-white text-sm mb-1&quot;&gt;*/}&#10;            {/*                {l}*/}&#10;            {/*            &lt;/p&gt;*/}&#10;            {/*        &lt;/div&gt;*/}&#10;            {/*    ))}*/}&#10;            {/*&lt;/div&gt;*/}&#10;            &lt;div className=&quot;relative w-full max-w-md mx-auto mt-2 mb-5&quot;&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search passwords...&quot;&#10;                    defaultValue={searchTerm}&#10;                    onKeyUp={handleKeyDown}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 rounded-lg text-black bg-white/70 focus:bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all&quot;&#10;                /&gt;&#10;                &lt;FaSearch className=&quot;absolute left-3 top-1/2 -translate-y-1/2 text-gray-500&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Add Button */}&#10;            &lt;button&#10;                onClick={() =&gt; setShowModal(true)}&#10;                className=&quot;fixed bottom-8 right-8 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg flex items-center justify-center z-30 transition&quot;&#10;                aria-label=&quot;Add new password&quot;&#10;            &gt;&#10;                &lt;FaPlus className=&quot;text-2xl&quot;/&gt;&#10;            &lt;/button&gt;&#10;&#10;            {/* Add/Edit Modal */}&#10;            {showModal &amp;&amp; (&#10;                &lt;AddNewPasswordModal&#10;                    addNewPassword={addNewPassword}&#10;                    onCloseModal={onCloseNewPasswordModal}&#10;                    editPassword={editPassword}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Setup Modal */}&#10;            {showPinSetup &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                    isSetup={true}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* PIN Verification Modal */}&#10;            {isAuthenticating &amp;&amp; !biometricAvailable &amp;&amp; (&#10;                &lt;PinModal&#10;                    onSuccess={handlePinSuccess}&#10;                    onCancel={handlePinCancel}&#10;                /&gt;&#10;            )}&#10;&#10;            {/* Biometric Authentication Indicator */}&#10;            {isAuthenticating &amp;&amp; biometricAvailable &amp;&amp; (&#10;                &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/40&quot; onClick={onClickOutsideLoader}&gt;&#10;                    &lt;div&#10;                        className=&quot;bg-white rounded-2xl shadow-2xl p-8 text-center&quot;&#10;                    &gt;&#10;                        &lt;FaFingerprint className=&quot;text-5xl text-blue-600 mx-auto mb-4 animate-pulse&quot;/&gt;&#10;                        &lt;h2 className=&quot;text-xl font-bold text-blue-700&quot;&gt;&#10;                            Verifying Identity&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-500 mt-2&quot;&gt;&#10;                            Use your device&amp;#39;s security method&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* View Password Modal */}&#10;            {viewPassword &amp;&amp; (&#10;                &lt;ShowPasswordModal closeViewModal={closeViewModal} viewPassword={viewPassword}/&gt;&#10;            )}&#10;&#10;            &lt;h2 className=&quot;text-2xl font-bold mb-6 text-white tracking-tight&quot;&gt;Saved Passwords&lt;/h2&gt;&#10;            &lt;ul className=&quot;space-y-4&quot;&gt;&#10;                {filteredPasswords.map((item) =&gt; (&#10;                    &lt;li&#10;                        key={item.id}&#10;                        className=&quot;bg-white/80 p-4 rounded-xl shadow-md flex items-center justify-between hover:shadow-lg transition-shadow&quot;&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                            &lt;FaUserCircle className=&quot;text-gray-800 text-3xl&quot;/&gt;&#10;                            &lt;div&gt;&#10;                                &lt;p className=&quot;font-semibold text-lg text-gray-800&quot;&gt;{item.title}&lt;/p&gt;&#10;                                &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;{item.username}&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-gray-800 hover:bg-gray-900 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleViewPassword(item)}&#10;                            &gt;&#10;                                &lt;FaEye/&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;View&lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-blue-500 hover:bg-blue-600 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleEditPassword(item)}&#10;                                aria-label=&quot;Edit&quot;&#10;                            &gt;&#10;                                &lt;FaPencilAlt/&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Edit&lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                                className=&quot;bg-red-500 hover:bg-red-600 px-4 py-2 text-white rounded-lg flex items-center gap-2 shadow transition&quot;&#10;                                onClick={() =&gt; handleDeletePassword(item)}&#10;                                aria-label=&quot;Delete&quot;&#10;                            &gt;&#10;                                &lt;FaTrash/&gt; &lt;span className=&quot;hidden sm:inline&quot;&gt;Delete&lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/li&gt;&#10;                ))}&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>